// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fluffy-bunny/grpcdotnetgo/pkg/contracts/metadatafilter (interfaces: IMetadataFilterMiddleware)

// Package metadatafilter is a generated GoMock package.
package metadatafilter

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockIMetadataFilterMiddleware is a mock of IMetadataFilterMiddleware interface.
type MockIMetadataFilterMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockIMetadataFilterMiddlewareMockRecorder
}

// MockIMetadataFilterMiddlewareMockRecorder is the mock recorder for MockIMetadataFilterMiddleware.
type MockIMetadataFilterMiddlewareMockRecorder struct {
	mock *MockIMetadataFilterMiddleware
}

// NewMockIMetadataFilterMiddleware creates a new mock instance.
func NewMockIMetadataFilterMiddleware(ctrl *gomock.Controller) *MockIMetadataFilterMiddleware {
	mock := &MockIMetadataFilterMiddleware{ctrl: ctrl}
	mock.recorder = &MockIMetadataFilterMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMetadataFilterMiddleware) EXPECT() *MockIMetadataFilterMiddlewareMockRecorder {
	return m.recorder
}

// GetUnaryServerInterceptor mocks base method.
func (m *MockIMetadataFilterMiddleware) GetUnaryServerInterceptor() grpc.UnaryServerInterceptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnaryServerInterceptor")
	ret0, _ := ret[0].(grpc.UnaryServerInterceptor)
	return ret0
}

// GetUnaryServerInterceptor indicates an expected call of GetUnaryServerInterceptor.
func (mr *MockIMetadataFilterMiddlewareMockRecorder) GetUnaryServerInterceptor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnaryServerInterceptor", reflect.TypeOf((*MockIMetadataFilterMiddleware)(nil).GetUnaryServerInterceptor))
}
