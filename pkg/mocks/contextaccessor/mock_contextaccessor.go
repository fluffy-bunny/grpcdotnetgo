// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fluffy-bunny/grpcdotnetgo/pkg/contracts/contextaccessor (interfaces: IContextAccessor,IInternalContextAccessor)

// Package contextaccessor is a generated GoMock package.
package contextaccessor

import (
	context "context"
	reflect "reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
	gomock "github.com/golang/mock/gomock"
)

// MockIContextAccessor is a mock of IContextAccessor interface.
type MockIContextAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockIContextAccessorMockRecorder
}

// MockIContextAccessorMockRecorder is the mock recorder for MockIContextAccessor.
type MockIContextAccessorMockRecorder struct {
	mock *MockIContextAccessor
}

// NewMockIContextAccessor creates a new mock instance.
func NewMockIContextAccessor(ctrl *gomock.Controller) *MockIContextAccessor {
	mock := &MockIContextAccessor{ctrl: ctrl}
	mock.recorder = &MockIContextAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContextAccessor) EXPECT() *MockIContextAccessorMockRecorder {
	return m.recorder
}

// GetContainer mocks base method.
func (m *MockIContextAccessor) GetContainer() di.Container {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainer")
	ret0, _ := ret[0].(di.Container)
	return ret0
}

// GetContainer indicates an expected call of GetContainer.
func (mr *MockIContextAccessorMockRecorder) GetContainer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainer", reflect.TypeOf((*MockIContextAccessor)(nil).GetContainer))
}

// GetContext mocks base method.
func (m *MockIContextAccessor) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockIContextAccessorMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockIContextAccessor)(nil).GetContext))
}

// MockIInternalContextAccessor is a mock of IInternalContextAccessor interface.
type MockIInternalContextAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockIInternalContextAccessorMockRecorder
}

// MockIInternalContextAccessorMockRecorder is the mock recorder for MockIInternalContextAccessor.
type MockIInternalContextAccessorMockRecorder struct {
	mock *MockIInternalContextAccessor
}

// NewMockIInternalContextAccessor creates a new mock instance.
func NewMockIInternalContextAccessor(ctrl *gomock.Controller) *MockIInternalContextAccessor {
	mock := &MockIInternalContextAccessor{ctrl: ctrl}
	mock.recorder = &MockIInternalContextAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIInternalContextAccessor) EXPECT() *MockIInternalContextAccessorMockRecorder {
	return m.recorder
}

// GetContainer mocks base method.
func (m *MockIInternalContextAccessor) GetContainer() di.Container {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainer")
	ret0, _ := ret[0].(di.Container)
	return ret0
}

// GetContainer indicates an expected call of GetContainer.
func (mr *MockIInternalContextAccessorMockRecorder) GetContainer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainer", reflect.TypeOf((*MockIInternalContextAccessor)(nil).GetContainer))
}

// GetContext mocks base method.
func (m *MockIInternalContextAccessor) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockIInternalContextAccessorMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockIInternalContextAccessor)(nil).GetContext))
}

// SetContext mocks base method.
func (m *MockIInternalContextAccessor) SetContext(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContext", arg0)
}

// SetContext indicates an expected call of SetContext.
func (mr *MockIInternalContextAccessorMockRecorder) SetContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockIInternalContextAccessor)(nil).SetContext), arg0)
}
