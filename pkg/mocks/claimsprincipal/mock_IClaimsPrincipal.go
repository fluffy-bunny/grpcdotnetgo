// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fluffy-bunny/grpcdotnetgo/pkg/contracts/claimsprincipal (interfaces: IClaimsPrincipal)

// Package claimsprincipal is a generated GoMock package.
package claimsprincipal

import (
	reflect "reflect"

	claimsprincipal "github.com/fluffy-bunny/grpcdotnetgo/pkg/contracts/claimsprincipal"
	gomock "github.com/golang/mock/gomock"
)

// MockIClaimsPrincipal is a mock of IClaimsPrincipal interface.
type MockIClaimsPrincipal struct {
	ctrl     *gomock.Controller
	recorder *MockIClaimsPrincipalMockRecorder
}

// MockIClaimsPrincipalMockRecorder is the mock recorder for MockIClaimsPrincipal.
type MockIClaimsPrincipalMockRecorder struct {
	mock *MockIClaimsPrincipal
}

// NewMockIClaimsPrincipal creates a new mock instance.
func NewMockIClaimsPrincipal(ctrl *gomock.Controller) *MockIClaimsPrincipal {
	mock := &MockIClaimsPrincipal{ctrl: ctrl}
	mock.recorder = &MockIClaimsPrincipalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClaimsPrincipal) EXPECT() *MockIClaimsPrincipalMockRecorder {
	return m.recorder
}

// AddClaim mocks base method.
func (m *MockIClaimsPrincipal) AddClaim(arg0 ...claimsprincipal.Claim) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddClaim", varargs...)
}

// AddClaim indicates an expected call of AddClaim.
func (mr *MockIClaimsPrincipalMockRecorder) AddClaim(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClaim", reflect.TypeOf((*MockIClaimsPrincipal)(nil).AddClaim), arg0...)
}

// GetClaims mocks base method.
func (m *MockIClaimsPrincipal) GetClaims() []claimsprincipal.Claim {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaims")
	ret0, _ := ret[0].([]claimsprincipal.Claim)
	return ret0
}

// GetClaims indicates an expected call of GetClaims.
func (mr *MockIClaimsPrincipalMockRecorder) GetClaims() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaims", reflect.TypeOf((*MockIClaimsPrincipal)(nil).GetClaims))
}

// GetClaimsByType mocks base method.
func (m *MockIClaimsPrincipal) GetClaimsByType(arg0 string) []claimsprincipal.Claim {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaimsByType", arg0)
	ret0, _ := ret[0].([]claimsprincipal.Claim)
	return ret0
}

// GetClaimsByType indicates an expected call of GetClaimsByType.
func (mr *MockIClaimsPrincipalMockRecorder) GetClaimsByType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaimsByType", reflect.TypeOf((*MockIClaimsPrincipal)(nil).GetClaimsByType), arg0)
}

// HasClaim mocks base method.
func (m *MockIClaimsPrincipal) HasClaim(arg0 claimsprincipal.Claim) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasClaim", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasClaim indicates an expected call of HasClaim.
func (mr *MockIClaimsPrincipalMockRecorder) HasClaim(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasClaim", reflect.TypeOf((*MockIClaimsPrincipal)(nil).HasClaim), arg0)
}

// HasClaimType mocks base method.
func (m *MockIClaimsPrincipal) HasClaimType(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasClaimType", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasClaimType indicates an expected call of HasClaimType.
func (mr *MockIClaimsPrincipalMockRecorder) HasClaimType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasClaimType", reflect.TypeOf((*MockIClaimsPrincipal)(nil).HasClaimType), arg0)
}

// RemoveClaim mocks base method.
func (m *MockIClaimsPrincipal) RemoveClaim(arg0 ...claimsprincipal.Claim) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RemoveClaim", varargs...)
}

// RemoveClaim indicates an expected call of RemoveClaim.
func (mr *MockIClaimsPrincipalMockRecorder) RemoveClaim(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClaim", reflect.TypeOf((*MockIClaimsPrincipal)(nil).RemoveClaim), arg0...)
}
