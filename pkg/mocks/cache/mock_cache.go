// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fluffy-bunny/grpcdotnetgo/pkg/contracts/cache (interfaces: ICache,IMemoryCache)

// Package cache is a generated GoMock package.
package cache

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockICache is a mock of ICache interface.
type MockICache struct {
	ctrl     *gomock.Controller
	recorder *MockICacheMockRecorder
}

// MockICacheMockRecorder is the mock recorder for MockICache.
type MockICacheMockRecorder struct {
	mock *MockICache
}

// NewMockICache creates a new mock instance.
func NewMockICache(ctrl *gomock.Controller) *MockICache {
	mock := &MockICache{ctrl: ctrl}
	mock.recorder = &MockICacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICache) EXPECT() *MockICacheMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockICache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockICacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockICache)(nil).Clear))
}

// Close mocks base method.
func (m *MockICache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockICacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockICache)(nil).Close))
}

// Del mocks base method.
func (m *MockICache) Del(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockICacheMockRecorder) Del(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockICache)(nil).Del), arg0)
}

// DelMulti mocks base method.
func (m *MockICache) DelMulti(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelMulti", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelMulti indicates an expected call of DelMulti.
func (mr *MockICacheMockRecorder) DelMulti(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelMulti", reflect.TypeOf((*MockICache)(nil).DelMulti), arg0)
}

// Get mocks base method.
func (m *MockICache) Get(arg0 string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockICacheMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICache)(nil).Get), arg0)
}

// GetMulti mocks base method.
func (m *MockICache) GetMulti(arg0 []string) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMulti", arg0)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetMulti indicates an expected call of GetMulti.
func (mr *MockICacheMockRecorder) GetMulti(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulti", reflect.TypeOf((*MockICache)(nil).GetMulti), arg0)
}

// Has mocks base method.
func (m *MockICache) Has(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockICacheMockRecorder) Has(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockICache)(nil).Has), arg0)
}

// Set mocks base method.
func (m *MockICache) Set(arg0 string, arg1 interface{}, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockICacheMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockICache)(nil).Set), arg0, arg1, arg2)
}

// SetMulti mocks base method.
func (m *MockICache) SetMulti(arg0 map[string]interface{}, arg1 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMulti", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMulti indicates an expected call of SetMulti.
func (mr *MockICacheMockRecorder) SetMulti(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMulti", reflect.TypeOf((*MockICache)(nil).SetMulti), arg0, arg1)
}

// MockIMemoryCache is a mock of IMemoryCache interface.
type MockIMemoryCache struct {
	ctrl     *gomock.Controller
	recorder *MockIMemoryCacheMockRecorder
}

// MockIMemoryCacheMockRecorder is the mock recorder for MockIMemoryCache.
type MockIMemoryCacheMockRecorder struct {
	mock *MockIMemoryCache
}

// NewMockIMemoryCache creates a new mock instance.
func NewMockIMemoryCache(ctrl *gomock.Controller) *MockIMemoryCache {
	mock := &MockIMemoryCache{ctrl: ctrl}
	mock.recorder = &MockIMemoryCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMemoryCache) EXPECT() *MockIMemoryCacheMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockIMemoryCache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockIMemoryCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockIMemoryCache)(nil).Clear))
}

// Close mocks base method.
func (m *MockIMemoryCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIMemoryCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIMemoryCache)(nil).Close))
}

// Del mocks base method.
func (m *MockIMemoryCache) Del(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockIMemoryCacheMockRecorder) Del(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockIMemoryCache)(nil).Del), arg0)
}

// DelMulti mocks base method.
func (m *MockIMemoryCache) DelMulti(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelMulti", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelMulti indicates an expected call of DelMulti.
func (mr *MockIMemoryCacheMockRecorder) DelMulti(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelMulti", reflect.TypeOf((*MockIMemoryCache)(nil).DelMulti), arg0)
}

// Get mocks base method.
func (m *MockIMemoryCache) Get(arg0 string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockIMemoryCacheMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIMemoryCache)(nil).Get), arg0)
}

// GetMulti mocks base method.
func (m *MockIMemoryCache) GetMulti(arg0 []string) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMulti", arg0)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetMulti indicates an expected call of GetMulti.
func (mr *MockIMemoryCacheMockRecorder) GetMulti(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulti", reflect.TypeOf((*MockIMemoryCache)(nil).GetMulti), arg0)
}

// Has mocks base method.
func (m *MockIMemoryCache) Has(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockIMemoryCacheMockRecorder) Has(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockIMemoryCache)(nil).Has), arg0)
}

// Set mocks base method.
func (m *MockIMemoryCache) Set(arg0 string, arg1 interface{}, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockIMemoryCacheMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIMemoryCache)(nil).Set), arg0, arg1, arg2)
}

// SetMulti mocks base method.
func (m *MockIMemoryCache) SetMulti(arg0 map[string]interface{}, arg1 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMulti", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMulti indicates an expected call of SetMulti.
func (mr *MockIMemoryCacheMockRecorder) SetMulti(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMulti", reflect.TypeOf((*MockIMemoryCache)(nil).SetMulti), arg0, arg1)
}
