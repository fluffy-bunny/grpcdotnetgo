// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fluffy-bunny/grpcdotnetgo/pkg/contracts/cache (interfaces: ICache,IMemoryCache)

// Package cache is a generated GoMock package.
package cache

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockICache is a mock of ICache interface.
type MockICache struct {
	ctrl     *gomock.Controller
	recorder *MockICacheMockRecorder
}

// MockICacheMockRecorder is the mock recorder for MockICache.
type MockICacheMockRecorder struct {
	mock *MockICache
}

// NewMockICache creates a new mock instance.
func NewMockICache(ctrl *gomock.Controller) *MockICache {
	mock := &MockICache{ctrl: ctrl}
	mock.recorder = &MockICacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICache) EXPECT() *MockICacheMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockICache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockICacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockICache)(nil).Close))
}

// Get mocks base method.
func (m *MockICache) Get(arg0 string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockICacheMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICache)(nil).Get), arg0)
}

// GetOrInsert mocks base method.
func (m *MockICache) GetOrInsert(arg0 string, arg1 func() (interface{}, time.Duration, error)) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrInsert", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetOrInsert indicates an expected call of GetOrInsert.
func (mr *MockICacheMockRecorder) GetOrInsert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrInsert", reflect.TypeOf((*MockICache)(nil).GetOrInsert), arg0, arg1)
}

// GetWithTTL mocks base method.
func (m *MockICache) GetWithTTL(arg0 string) (interface{}, time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithTTL", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(time.Duration)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWithTTL indicates an expected call of GetWithTTL.
func (mr *MockICacheMockRecorder) GetWithTTL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithTTL", reflect.TypeOf((*MockICache)(nil).GetWithTTL), arg0)
}

// Purge mocks base method.
func (m *MockICache) Purge() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Purge")
	ret0, _ := ret[0].(error)
	return ret0
}

// Purge indicates an expected call of Purge.
func (mr *MockICacheMockRecorder) Purge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockICache)(nil).Purge))
}

// Remove mocks base method.
func (m *MockICache) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockICacheMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockICache)(nil).Remove), arg0)
}

// Set mocks base method.
func (m *MockICache) Set(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockICacheMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockICache)(nil).Set), arg0, arg1)
}

// SetTTL mocks base method.
func (m *MockICache) SetTTL(arg0 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTTL", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTTL indicates an expected call of SetTTL.
func (mr *MockICacheMockRecorder) SetTTL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTTL", reflect.TypeOf((*MockICache)(nil).SetTTL), arg0)
}

// SetWithTTL mocks base method.
func (m *MockICache) SetWithTTL(arg0 string, arg1 interface{}, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithTTL", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithTTL indicates an expected call of SetWithTTL.
func (mr *MockICacheMockRecorder) SetWithTTL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithTTL", reflect.TypeOf((*MockICache)(nil).SetWithTTL), arg0, arg1, arg2)
}

// MockIMemoryCache is a mock of IMemoryCache interface.
type MockIMemoryCache struct {
	ctrl     *gomock.Controller
	recorder *MockIMemoryCacheMockRecorder
}

// MockIMemoryCacheMockRecorder is the mock recorder for MockIMemoryCache.
type MockIMemoryCacheMockRecorder struct {
	mock *MockIMemoryCache
}

// NewMockIMemoryCache creates a new mock instance.
func NewMockIMemoryCache(ctrl *gomock.Controller) *MockIMemoryCache {
	mock := &MockIMemoryCache{ctrl: ctrl}
	mock.recorder = &MockIMemoryCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMemoryCache) EXPECT() *MockIMemoryCacheMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIMemoryCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIMemoryCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIMemoryCache)(nil).Close))
}

// Get mocks base method.
func (m *MockIMemoryCache) Get(arg0 string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIMemoryCacheMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIMemoryCache)(nil).Get), arg0)
}

// GetOrInsert mocks base method.
func (m *MockIMemoryCache) GetOrInsert(arg0 string, arg1 func() (interface{}, time.Duration, error)) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrInsert", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetOrInsert indicates an expected call of GetOrInsert.
func (mr *MockIMemoryCacheMockRecorder) GetOrInsert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrInsert", reflect.TypeOf((*MockIMemoryCache)(nil).GetOrInsert), arg0, arg1)
}

// GetWithTTL mocks base method.
func (m *MockIMemoryCache) GetWithTTL(arg0 string) (interface{}, time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithTTL", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(time.Duration)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWithTTL indicates an expected call of GetWithTTL.
func (mr *MockIMemoryCacheMockRecorder) GetWithTTL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithTTL", reflect.TypeOf((*MockIMemoryCache)(nil).GetWithTTL), arg0)
}

// Purge mocks base method.
func (m *MockIMemoryCache) Purge() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Purge")
	ret0, _ := ret[0].(error)
	return ret0
}

// Purge indicates an expected call of Purge.
func (mr *MockIMemoryCacheMockRecorder) Purge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockIMemoryCache)(nil).Purge))
}

// Remove mocks base method.
func (m *MockIMemoryCache) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockIMemoryCacheMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockIMemoryCache)(nil).Remove), arg0)
}

// Set mocks base method.
func (m *MockIMemoryCache) Set(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockIMemoryCacheMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIMemoryCache)(nil).Set), arg0, arg1)
}

// SetTTL mocks base method.
func (m *MockIMemoryCache) SetTTL(arg0 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTTL", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTTL indicates an expected call of SetTTL.
func (mr *MockIMemoryCacheMockRecorder) SetTTL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTTL", reflect.TypeOf((*MockIMemoryCache)(nil).SetTTL), arg0)
}

// SetWithTTL mocks base method.
func (m *MockIMemoryCache) SetWithTTL(arg0 string, arg1 interface{}, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithTTL", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithTTL indicates an expected call of SetWithTTL.
func (mr *MockIMemoryCacheMockRecorder) SetWithTTL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithTTL", reflect.TypeOf((*MockIMemoryCache)(nil).SetWithTTL), arg0, arg1, arg2)
}
