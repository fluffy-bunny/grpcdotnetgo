// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fluffy-bunny/grpcdotnetgo/pkg/contracts/oauth2 (interfaces: IOAuth2Authenticator)

// Package oauth2 is a generated GoMock package.
package oauth2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockIOAuth2Authenticator is a mock of IOAuth2Authenticator interface.
type MockIOAuth2Authenticator struct {
	ctrl     *gomock.Controller
	recorder *MockIOAuth2AuthenticatorMockRecorder
}

// MockIOAuth2AuthenticatorMockRecorder is the mock recorder for MockIOAuth2Authenticator.
type MockIOAuth2AuthenticatorMockRecorder struct {
	mock *MockIOAuth2Authenticator
}

// NewMockIOAuth2Authenticator creates a new mock instance.
func NewMockIOAuth2Authenticator(ctrl *gomock.Controller) *MockIOAuth2Authenticator {
	mock := &MockIOAuth2Authenticator{ctrl: ctrl}
	mock.recorder = &MockIOAuth2AuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOAuth2Authenticator) EXPECT() *MockIOAuth2AuthenticatorMockRecorder {
	return m.recorder
}

// AuthCodeURL mocks base method.
func (m *MockIOAuth2Authenticator) AuthCodeURL(arg0 string, arg1 ...oauth2.AuthCodeOption) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthCodeURL", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// AuthCodeURL indicates an expected call of AuthCodeURL.
func (mr *MockIOAuth2AuthenticatorMockRecorder) AuthCodeURL(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthCodeURL", reflect.TypeOf((*MockIOAuth2Authenticator)(nil).AuthCodeURL), varargs...)
}

// Exchange mocks base method.
func (m *MockIOAuth2Authenticator) Exchange(arg0 context.Context, arg1 string, arg2 ...oauth2.AuthCodeOption) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exchange", varargs...)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockIOAuth2AuthenticatorMockRecorder) Exchange(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockIOAuth2Authenticator)(nil).Exchange), varargs...)
}

// GetTokenSource mocks base method.
func (m *MockIOAuth2Authenticator) GetTokenSource(arg0 context.Context, arg1 *oauth2.Token) oauth2.TokenSource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenSource", arg0, arg1)
	ret0, _ := ret[0].(oauth2.TokenSource)
	return ret0
}

// GetTokenSource indicates an expected call of GetTokenSource.
func (mr *MockIOAuth2AuthenticatorMockRecorder) GetTokenSource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenSource", reflect.TypeOf((*MockIOAuth2Authenticator)(nil).GetTokenSource), arg0, arg1)
}
