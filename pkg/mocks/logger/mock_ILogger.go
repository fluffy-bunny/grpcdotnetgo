// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fluffy-bunny/grpcdotnetgo/pkg/contracts/logger (interfaces: ILogger)

// Package logger is a generated GoMock package.
package logger

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zerolog "github.com/rs/zerolog"
)

// MockILogger is a mock of ILogger interface.
type MockILogger struct {
	ctrl     *gomock.Controller
	recorder *MockILoggerMockRecorder
}

// MockILoggerMockRecorder is the mock recorder for MockILogger.
type MockILoggerMockRecorder struct {
	mock *MockILogger
}

// NewMockILogger creates a new mock instance.
func NewMockILogger(ctrl *gomock.Controller) *MockILogger {
	mock := &MockILogger{ctrl: ctrl}
	mock.recorder = &MockILoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogger) EXPECT() *MockILoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockILogger) Debug() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Debug indicates an expected call of Debug.
func (mr *MockILoggerMockRecorder) Debug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockILogger)(nil).Debug))
}

// DebugL mocks base method.
func (m *MockILogger) DebugL(arg0 *zerolog.Logger) *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugL", arg0)
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// DebugL indicates an expected call of DebugL.
func (mr *MockILoggerMockRecorder) DebugL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugL", reflect.TypeOf((*MockILogger)(nil).DebugL), arg0)
}

// Error mocks base method.
func (m *MockILogger) Error() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockILoggerMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockILogger)(nil).Error))
}

// ErrorL mocks base method.
func (m *MockILogger) ErrorL(arg0 *zerolog.Logger) *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorL", arg0)
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// ErrorL indicates an expected call of ErrorL.
func (mr *MockILoggerMockRecorder) ErrorL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorL", reflect.TypeOf((*MockILogger)(nil).ErrorL), arg0)
}

// Fatal mocks base method.
func (m *MockILogger) Fatal() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fatal")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Fatal indicates an expected call of Fatal.
func (mr *MockILoggerMockRecorder) Fatal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockILogger)(nil).Fatal))
}

// FatalL mocks base method.
func (m *MockILogger) FatalL(arg0 *zerolog.Logger) *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FatalL", arg0)
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// FatalL indicates an expected call of FatalL.
func (mr *MockILoggerMockRecorder) FatalL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FatalL", reflect.TypeOf((*MockILogger)(nil).FatalL), arg0)
}

// GetLogger mocks base method.
func (m *MockILogger) GetLogger() *zerolog.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(*zerolog.Logger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockILoggerMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockILogger)(nil).GetLogger))
}

// Info mocks base method.
func (m *MockILogger) Info() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockILoggerMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockILogger)(nil).Info))
}

// InfoL mocks base method.
func (m *MockILogger) InfoL(arg0 *zerolog.Logger) *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfoL", arg0)
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// InfoL indicates an expected call of InfoL.
func (mr *MockILoggerMockRecorder) InfoL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoL", reflect.TypeOf((*MockILogger)(nil).InfoL), arg0)
}

// Trace mocks base method.
func (m *MockILogger) Trace() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trace")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Trace indicates an expected call of Trace.
func (mr *MockILoggerMockRecorder) Trace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockILogger)(nil).Trace))
}

// TraceL mocks base method.
func (m *MockILogger) TraceL(arg0 *zerolog.Logger) *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TraceL", arg0)
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// TraceL indicates an expected call of TraceL.
func (mr *MockILoggerMockRecorder) TraceL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceL", reflect.TypeOf((*MockILogger)(nil).TraceL), arg0)
}

// Warn mocks base method.
func (m *MockILogger) Warn() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Warn")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Warn indicates an expected call of Warn.
func (mr *MockILoggerMockRecorder) Warn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockILogger)(nil).Warn))
}

// WarnL mocks base method.
func (m *MockILogger) WarnL(arg0 *zerolog.Logger) *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WarnL", arg0)
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// WarnL indicates an expected call of WarnL.
func (mr *MockILoggerMockRecorder) WarnL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnL", reflect.TypeOf((*MockILogger)(nil).WarnL), arg0)
}
