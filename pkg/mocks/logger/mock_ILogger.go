// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fluffy-bunny/grpcdotnetgo/pkg/contracts/logger (interfaces: ILogger,ISingletonLogger)

// Package logger is a generated GoMock package.
package logger

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zerolog "github.com/rs/zerolog"
)

// MockILogger is a mock of ILogger interface.
type MockILogger struct {
	ctrl     *gomock.Controller
	recorder *MockILoggerMockRecorder
}

// MockILoggerMockRecorder is the mock recorder for MockILogger.
type MockILoggerMockRecorder struct {
	mock *MockILogger
}

// NewMockILogger creates a new mock instance.
func NewMockILogger(ctrl *gomock.Controller) *MockILogger {
	mock := &MockILogger{ctrl: ctrl}
	mock.recorder = &MockILoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogger) EXPECT() *MockILoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockILogger) Debug() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Debug indicates an expected call of Debug.
func (mr *MockILoggerMockRecorder) Debug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockILogger)(nil).Debug))
}

// Error mocks base method.
func (m *MockILogger) Error() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockILoggerMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockILogger)(nil).Error))
}

// Fatal mocks base method.
func (m *MockILogger) Fatal() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fatal")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Fatal indicates an expected call of Fatal.
func (mr *MockILoggerMockRecorder) Fatal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockILogger)(nil).Fatal))
}

// GetLogger mocks base method.
func (m *MockILogger) GetLogger() *zerolog.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(*zerolog.Logger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockILoggerMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockILogger)(nil).GetLogger))
}

// Info mocks base method.
func (m *MockILogger) Info() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockILoggerMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockILogger)(nil).Info))
}

// Trace mocks base method.
func (m *MockILogger) Trace() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trace")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Trace indicates an expected call of Trace.
func (mr *MockILoggerMockRecorder) Trace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockILogger)(nil).Trace))
}

// Warn mocks base method.
func (m *MockILogger) Warn() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Warn")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Warn indicates an expected call of Warn.
func (mr *MockILoggerMockRecorder) Warn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockILogger)(nil).Warn))
}

// MockISingletonLogger is a mock of ISingletonLogger interface.
type MockISingletonLogger struct {
	ctrl     *gomock.Controller
	recorder *MockISingletonLoggerMockRecorder
}

// MockISingletonLoggerMockRecorder is the mock recorder for MockISingletonLogger.
type MockISingletonLoggerMockRecorder struct {
	mock *MockISingletonLogger
}

// NewMockISingletonLogger creates a new mock instance.
func NewMockISingletonLogger(ctrl *gomock.Controller) *MockISingletonLogger {
	mock := &MockISingletonLogger{ctrl: ctrl}
	mock.recorder = &MockISingletonLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISingletonLogger) EXPECT() *MockISingletonLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockISingletonLogger) Debug() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Debug indicates an expected call of Debug.
func (mr *MockISingletonLoggerMockRecorder) Debug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockISingletonLogger)(nil).Debug))
}

// Error mocks base method.
func (m *MockISingletonLogger) Error() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockISingletonLoggerMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockISingletonLogger)(nil).Error))
}

// Fatal mocks base method.
func (m *MockISingletonLogger) Fatal() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fatal")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Fatal indicates an expected call of Fatal.
func (mr *MockISingletonLoggerMockRecorder) Fatal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockISingletonLogger)(nil).Fatal))
}

// GetLogger mocks base method.
func (m *MockISingletonLogger) GetLogger() *zerolog.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(*zerolog.Logger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockISingletonLoggerMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockISingletonLogger)(nil).GetLogger))
}

// Info mocks base method.
func (m *MockISingletonLogger) Info() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockISingletonLoggerMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockISingletonLogger)(nil).Info))
}

// Trace mocks base method.
func (m *MockISingletonLogger) Trace() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trace")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Trace indicates an expected call of Trace.
func (mr *MockISingletonLoggerMockRecorder) Trace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockISingletonLogger)(nil).Trace))
}

// Warn mocks base method.
func (m *MockISingletonLogger) Warn() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Warn")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Warn indicates an expected call of Warn.
func (mr *MockISingletonLoggerMockRecorder) Warn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockISingletonLogger)(nil).Warn))
}
