// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package logger

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeILogger used when your service claims to implement ILogger
var ReflectTypeILogger = di.GetInterfaceReflectType((*ILogger)(nil))

// AddSingletonILogger adds a type that implements ILogger
func AddSingletonILogger(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeILogger)
	di.AddSingletonWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddSingletonILoggerByObj adds a prebuilt obj
func AddSingletonILoggerByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeILogger)
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonILoggerByFunc adds a type by a custom func
func AddSingletonILoggerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeILogger)
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientILogger adds a type that implements ILogger
func AddTransientILogger(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeILogger)
	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientILoggerByFunc adds a type by a custom func
func AddTransientILoggerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeILogger)
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedILogger adds a type that implements ILogger
func AddScopedILogger(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeILogger)
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedILoggerByFunc adds a type by a custom func
func AddScopedILoggerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeILogger)
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// RemoveAllILogger removes all ILogger from the DI
func RemoveAllILogger(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeILogger)
}

// GetILoggerFromContainer alternative to SafeGetILoggerFromContainer but panics of object is not present
func GetILoggerFromContainer(ctn di.Container) ILogger {
	return ctn.GetByType(ReflectTypeILogger).(ILogger)
}

// GetManyILoggerFromContainer alternative to SafeGetManyILoggerFromContainer but panics of object is not present
func GetManyILoggerFromContainer(ctn di.Container) []ILogger {
	objs := ctn.GetManyByType(ReflectTypeILogger)
	var results []ILogger
	for _, obj := range objs {
		results = append(results, obj.(ILogger))
	}
	return results
}

// SafeGetILoggerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetILoggerFromContainer(ctn di.Container) (ILogger, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeILogger)
	if err != nil {
		return nil, err
	}
	return obj.(ILogger), nil
}

// SafeGetManyILoggerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyILoggerFromContainer(ctn di.Container) ([]ILogger, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeILogger)
	if err != nil {
		return nil, err
	}
	var results []ILogger
	for _, obj := range objs {
		results = append(results, obj.(ILogger))
	}
	return results, nil
}

// ReflectTypeISingletonLogger used when your service claims to implement ISingletonLogger
var ReflectTypeISingletonLogger = di.GetInterfaceReflectType((*ISingletonLogger)(nil))

// AddSingletonISingletonLogger adds a type that implements ISingletonLogger
func AddSingletonISingletonLogger(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonLogger)
	di.AddSingletonWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddSingletonISingletonLoggerByObj adds a prebuilt obj
func AddSingletonISingletonLoggerByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonLogger)
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonISingletonLoggerByFunc adds a type by a custom func
func AddSingletonISingletonLoggerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonLogger)
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientISingletonLogger adds a type that implements ISingletonLogger
func AddTransientISingletonLogger(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonLogger)
	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientISingletonLoggerByFunc adds a type by a custom func
func AddTransientISingletonLoggerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonLogger)
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedISingletonLogger adds a type that implements ISingletonLogger
func AddScopedISingletonLogger(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonLogger)
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedISingletonLoggerByFunc adds a type by a custom func
func AddScopedISingletonLoggerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonLogger)
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// RemoveAllISingletonLogger removes all ISingletonLogger from the DI
func RemoveAllISingletonLogger(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeISingletonLogger)
}

// GetISingletonLoggerFromContainer alternative to SafeGetISingletonLoggerFromContainer but panics of object is not present
func GetISingletonLoggerFromContainer(ctn di.Container) ISingletonLogger {
	return ctn.GetByType(ReflectTypeISingletonLogger).(ISingletonLogger)
}

// GetManyISingletonLoggerFromContainer alternative to SafeGetManyISingletonLoggerFromContainer but panics of object is not present
func GetManyISingletonLoggerFromContainer(ctn di.Container) []ISingletonLogger {
	objs := ctn.GetManyByType(ReflectTypeISingletonLogger)
	var results []ISingletonLogger
	for _, obj := range objs {
		results = append(results, obj.(ISingletonLogger))
	}
	return results
}

// SafeGetISingletonLoggerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetISingletonLoggerFromContainer(ctn di.Container) (ISingletonLogger, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeISingletonLogger)
	if err != nil {
		return nil, err
	}
	return obj.(ISingletonLogger), nil
}

// SafeGetManyISingletonLoggerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyISingletonLoggerFromContainer(ctn di.Container) ([]ISingletonLogger, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeISingletonLogger)
	if err != nil {
		return nil, err
	}
	var results []ISingletonLogger
	for _, obj := range objs {
		results = append(results, obj.(ISingletonLogger))
	}
	return results, nil
}
