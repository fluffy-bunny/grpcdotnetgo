// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package contextaccessor

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeIContextAccessor used when your service claims to implement IContextAccessor
var ReflectTypeIContextAccessor = di.GetInterfaceReflectType((*IContextAccessor)(nil))

// AddSingletonIContextAccessorByObj adds a prebuilt obj
func AddSingletonIContextAccessorByObj(builder *di.Builder, obj interface{}) {
	di.AddSingletonWithImplementedTypesByObj(builder, obj, ReflectTypeIContextAccessor)
}

// AddSingletonIContextAccessor adds a type that implements IContextAccessor
func AddSingletonIContextAccessor(builder *di.Builder, implType reflect.Type) {
	di.AddSingletonWithImplementedTypes(builder, implType, ReflectTypeIContextAccessor)
}

// AddSingletonIContextAccessorByFunc adds a type by a custom func
func AddSingletonIContextAccessorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIContextAccessor)
}

// AddTransientIContextAccessor adds a type that implements IContextAccessor
func AddTransientIContextAccessor(builder *di.Builder, implType reflect.Type) {
	di.AddTransientWithImplementedTypes(builder, implType, ReflectTypeIContextAccessor)
}

// AddTransientIContextAccessorByFunc adds a type by a custom func
func AddTransientIContextAccessorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIContextAccessor)
}

// AddScopedIContextAccessor adds a type that implements IContextAccessor
func AddScopedIContextAccessor(builder *di.Builder, implType reflect.Type) {
	di.AddScopedWithImplementedTypes(builder, implType, ReflectTypeIContextAccessor)
}

// AddScopedIContextAccessorByFunc adds a type by a custom func
func AddScopedIContextAccessorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIContextAccessor)
}

// GetIContextAccessorFromContainer alternative to SafeGetIContextAccessorFromContainer but panics of object is not present
func GetIContextAccessorFromContainer(ctn di.Container) IContextAccessor {
	return ctn.GetByType(ReflectTypeIContextAccessor).(IContextAccessor)
}

// SafeGetIContextAccessorFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIContextAccessorFromContainer(ctn di.Container) (IContextAccessor, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIContextAccessor)
	if err != nil {
		return nil, err
	}
	return obj.(IContextAccessor), nil
}

// ReflectTypeIInternalContextAccessor used when your service claims to implement IInternalContextAccessor
var ReflectTypeIInternalContextAccessor = di.GetInterfaceReflectType((*IInternalContextAccessor)(nil))

// AddSingletonIInternalContextAccessorByObj adds a prebuilt obj
func AddSingletonIInternalContextAccessorByObj(builder *di.Builder, obj interface{}) {
	di.AddSingletonWithImplementedTypesByObj(builder, obj, ReflectTypeIInternalContextAccessor)
}

// AddSingletonIInternalContextAccessor adds a type that implements IInternalContextAccessor
func AddSingletonIInternalContextAccessor(builder *di.Builder, implType reflect.Type) {
	di.AddSingletonWithImplementedTypes(builder, implType, ReflectTypeIInternalContextAccessor)
}

// AddSingletonIInternalContextAccessorByFunc adds a type by a custom func
func AddSingletonIInternalContextAccessorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIInternalContextAccessor)
}

// AddTransientIInternalContextAccessor adds a type that implements IInternalContextAccessor
func AddTransientIInternalContextAccessor(builder *di.Builder, implType reflect.Type) {
	di.AddTransientWithImplementedTypes(builder, implType, ReflectTypeIInternalContextAccessor)
}

// AddTransientIInternalContextAccessorByFunc adds a type by a custom func
func AddTransientIInternalContextAccessorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIInternalContextAccessor)
}

// AddScopedIInternalContextAccessor adds a type that implements IInternalContextAccessor
func AddScopedIInternalContextAccessor(builder *di.Builder, implType reflect.Type) {
	di.AddScopedWithImplementedTypes(builder, implType, ReflectTypeIInternalContextAccessor)
}

// AddScopedIInternalContextAccessorByFunc adds a type by a custom func
func AddScopedIInternalContextAccessorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIInternalContextAccessor)
}

// GetIInternalContextAccessorFromContainer alternative to SafeGetIInternalContextAccessorFromContainer but panics of object is not present
func GetIInternalContextAccessorFromContainer(ctn di.Container) IInternalContextAccessor {
	return ctn.GetByType(ReflectTypeIInternalContextAccessor).(IInternalContextAccessor)
}

// SafeGetIInternalContextAccessorFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIInternalContextAccessorFromContainer(ctn di.Container) (IInternalContextAccessor, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIInternalContextAccessor)
	if err != nil {
		return nil, err
	}
	return obj.(IInternalContextAccessor), nil
}
