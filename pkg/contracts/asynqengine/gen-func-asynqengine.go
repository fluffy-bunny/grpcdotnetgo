// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package asynqengine

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeGetMiniRedisOptions used when your service claims to implement GetMiniRedisOptions
var ReflectTypeGetMiniRedisOptions = reflect.TypeOf(GetMiniRedisOptions(nil))

// AddSingletonGetMiniRedisOptionsFunc adds a func to the DI
func AddGetMiniRedisOptionsFunc(builder *di.Builder, fnc GetMiniRedisOptions) {
	di.AddFunc(builder, fnc)
}

// RemoveAllGetMiniRedisOptionsFunc removes all GetMiniRedisOptions functions from the DI
func RemoveAllGetMiniRedisOptionsFunc(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeGetMiniRedisOptions)
}

// GetGetMiniRedisOptionsFromContainer alternative to SafeGetGetMiniRedisOptionsFromContainer but panics of object is not present
func GetGetMiniRedisOptionsFromContainer(ctn di.Container) GetMiniRedisOptions {
	return ctn.GetByType(ReflectTypeGetMiniRedisOptions).(GetMiniRedisOptions)
}

// GetManyGetMiniRedisOptionsFromContainer alternative to SafeGetManyGetMiniRedisOptionsFromContainer but panics of object is not present
func GetManyGetMiniRedisOptionsFromContainer(ctn di.Container) []GetMiniRedisOptions {
	objs := ctn.GetManyByType(ReflectTypeGetMiniRedisOptions)
	var results []GetMiniRedisOptions
	for _, obj := range objs {
		results = append(results, obj.(GetMiniRedisOptions))
	}
	return results
}

// SafeGetGetMiniRedisOptionsFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetGetMiniRedisOptionsFromContainer(ctn di.Container) (GetMiniRedisOptions, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeGetMiniRedisOptions)
	if err != nil {
		return nil, err
	}
	return obj.(GetMiniRedisOptions), nil
}

// SafeGetManyGetMiniRedisOptionsFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyGetMiniRedisOptionsFromContainer(ctn di.Container) ([]GetMiniRedisOptions, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeGetMiniRedisOptions)
	if err != nil {
		return nil, err
	}
	var results []GetMiniRedisOptions
	for _, obj := range objs {
		results = append(results, obj.(GetMiniRedisOptions))
	}
	return results, nil
}

// ReflectTypeGetRedisOptions used when your service claims to implement GetRedisOptions
var ReflectTypeGetRedisOptions = reflect.TypeOf(GetRedisOptions(nil))

// AddSingletonGetRedisOptionsFunc adds a func to the DI
func AddGetRedisOptionsFunc(builder *di.Builder, fnc GetRedisOptions) {
	di.AddFunc(builder, fnc)
}

// RemoveAllGetRedisOptionsFunc removes all GetRedisOptions functions from the DI
func RemoveAllGetRedisOptionsFunc(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeGetRedisOptions)
}

// GetGetRedisOptionsFromContainer alternative to SafeGetGetRedisOptionsFromContainer but panics of object is not present
func GetGetRedisOptionsFromContainer(ctn di.Container) GetRedisOptions {
	return ctn.GetByType(ReflectTypeGetRedisOptions).(GetRedisOptions)
}

// GetManyGetRedisOptionsFromContainer alternative to SafeGetManyGetRedisOptionsFromContainer but panics of object is not present
func GetManyGetRedisOptionsFromContainer(ctn di.Container) []GetRedisOptions {
	objs := ctn.GetManyByType(ReflectTypeGetRedisOptions)
	var results []GetRedisOptions
	for _, obj := range objs {
		results = append(results, obj.(GetRedisOptions))
	}
	return results
}

// SafeGetGetRedisOptionsFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetGetRedisOptionsFromContainer(ctn di.Container) (GetRedisOptions, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeGetRedisOptions)
	if err != nil {
		return nil, err
	}
	return obj.(GetRedisOptions), nil
}

// SafeGetManyGetRedisOptionsFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyGetRedisOptionsFromContainer(ctn di.Container) ([]GetRedisOptions, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeGetRedisOptions)
	if err != nil {
		return nil, err
	}
	var results []GetRedisOptions
	for _, obj := range objs {
		results = append(results, obj.(GetRedisOptions))
	}
	return results, nil
}
