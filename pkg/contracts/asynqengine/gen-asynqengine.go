// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package asynqengine

import (
	"reflect"
	"strings"

	di "github.com/fluffy-bunny/sarulabsdi"
	"github.com/rs/zerolog/log"
)

// ReflectTypeISingletonTask used when your service claims to implement ISingletonTask
var ReflectTypeISingletonTask = di.GetInterfaceReflectType((*ISingletonTask)(nil))

// AddSingletonISingletonTask adds a type that implements ISingletonTask
func AddSingletonISingletonTask(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SINGLETON", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonISingletonTaskWithMetadata adds a type that implements ISingletonTask
func AddSingletonISingletonTaskWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SINGLETON", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logISingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonISingletonTaskByObj adds a prebuilt obj
func AddSingletonISingletonTaskByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SINGLETON", reflect.TypeOf(obj), _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonISingletonTaskByObjWithMetadata adds a prebuilt obj
func AddSingletonISingletonTaskByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SINGLETON", reflect.TypeOf(obj), _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logISingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonISingletonTaskByFunc adds a type by a custom func
func AddSingletonISingletonTaskByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SINGLETON", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonISingletonTaskByFuncWithMetadata adds a type by a custom func
func AddSingletonISingletonTaskByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SINGLETON", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logISingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientISingletonTask adds a type that implements ISingletonTask
func AddTransientISingletonTask(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("TRANSIENT", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientISingletonTaskWithMetadata adds a type that implements ISingletonTask
func AddTransientISingletonTaskWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("TRANSIENT", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logISingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientISingletonTaskByFunc adds a type by a custom func
func AddTransientISingletonTaskByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("TRANSIENT", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientISingletonTaskByFuncWithMetadata adds a type by a custom func
func AddTransientISingletonTaskByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("TRANSIENT", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logISingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedISingletonTask adds a type that implements ISingletonTask
func AddScopedISingletonTask(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SCOPED", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedISingletonTaskWithMetadata adds a type that implements ISingletonTask
func AddScopedISingletonTaskWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SCOPED", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logISingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedISingletonTaskByFunc adds a type by a custom func
func AddScopedISingletonTaskByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SCOPED", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedISingletonTaskByFuncWithMetadata adds a type by a custom func
func AddScopedISingletonTaskByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SCOPED", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logISingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllISingletonTask removes all ISingletonTask from the DI
func RemoveAllISingletonTask(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeISingletonTask)
}

// GetISingletonTaskFromContainer alternative to SafeGetISingletonTaskFromContainer but panics of object is not present
func GetISingletonTaskFromContainer(ctn di.Container) ISingletonTask {
	return ctn.GetByType(ReflectTypeISingletonTask).(ISingletonTask)
}

// GetManyISingletonTaskFromContainer alternative to SafeGetManyISingletonTaskFromContainer but panics of object is not present
func GetManyISingletonTaskFromContainer(ctn di.Container) []ISingletonTask {
	objs := ctn.GetManyByType(ReflectTypeISingletonTask)
	var results []ISingletonTask
	for _, obj := range objs {
		results = append(results, obj.(ISingletonTask))
	}
	return results
}

// SafeGetISingletonTaskFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetISingletonTaskFromContainer(ctn di.Container) (ISingletonTask, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeISingletonTask)
	if err != nil {
		return nil, err
	}
	return obj.(ISingletonTask), nil
}

// GetISingletonTaskDefinition returns that last definition registered that this container can provide
func GetISingletonTaskDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeISingletonTask)
	return def
}

// GetISingletonTaskDefinitions returns all definitions that this container can provide
func GetISingletonTaskDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeISingletonTask)
	return defs
}

// SafeGetManyISingletonTaskFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyISingletonTaskFromContainer(ctn di.Container) ([]ISingletonTask, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeISingletonTask)
	if err != nil {
		return nil, err
	}
	var results []ISingletonTask
	for _, obj := range objs {
		results = append(results, obj.(ISingletonTask))
	}
	return results, nil
}

type _logISingletonTaskExtra struct {
	Name  string
	Value interface{}
}

func _logAddISingletonTask(scopeType string, implType reflect.Type, interfaces string, extra ..._logISingletonTaskExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedISingletonTaskNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}

// ReflectTypeITaskClient used when your service claims to implement ITaskClient
var ReflectTypeITaskClient = di.GetInterfaceReflectType((*ITaskClient)(nil))

// AddSingletonITaskClient adds a type that implements ITaskClient
func AddSingletonITaskClient(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskClient)
	_logAddITaskClient("SINGLETON", implType, _getImplementedITaskClientNames(implementedTypes...),
		_logITaskClientExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonITaskClientWithMetadata adds a type that implements ITaskClient
func AddSingletonITaskClientWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskClient)
	_logAddITaskClient("SINGLETON", implType, _getImplementedITaskClientNames(implementedTypes...),
		_logITaskClientExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonITaskClientByObj adds a prebuilt obj
func AddSingletonITaskClientByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskClient)
	_logAddITaskClient("SINGLETON", reflect.TypeOf(obj), _getImplementedITaskClientNames(implementedTypes...),
		_logITaskClientExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonITaskClientByObjWithMetadata adds a prebuilt obj
func AddSingletonITaskClientByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskClient)
	_logAddITaskClient("SINGLETON", reflect.TypeOf(obj), _getImplementedITaskClientNames(implementedTypes...),
		_logITaskClientExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logITaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonITaskClientByFunc adds a type by a custom func
func AddSingletonITaskClientByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskClient)
	_logAddITaskClient("SINGLETON", implType, _getImplementedITaskClientNames(implementedTypes...),
		_logITaskClientExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonITaskClientByFuncWithMetadata adds a type by a custom func
func AddSingletonITaskClientByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskClient)
	_logAddITaskClient("SINGLETON", implType, _getImplementedITaskClientNames(implementedTypes...),
		_logITaskClientExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientITaskClient adds a type that implements ITaskClient
func AddTransientITaskClient(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskClient)
	_logAddITaskClient("TRANSIENT", implType, _getImplementedITaskClientNames(implementedTypes...),
		_logITaskClientExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientITaskClientWithMetadata adds a type that implements ITaskClient
func AddTransientITaskClientWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskClient)
	_logAddITaskClient("TRANSIENT", implType, _getImplementedITaskClientNames(implementedTypes...),
		_logITaskClientExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientITaskClientByFunc adds a type by a custom func
func AddTransientITaskClientByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskClient)
	_logAddITaskClient("TRANSIENT", implType, _getImplementedITaskClientNames(implementedTypes...),
		_logITaskClientExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientITaskClientByFuncWithMetadata adds a type by a custom func
func AddTransientITaskClientByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskClient)
	_logAddITaskClient("TRANSIENT", implType, _getImplementedITaskClientNames(implementedTypes...),
		_logITaskClientExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedITaskClient adds a type that implements ITaskClient
func AddScopedITaskClient(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskClient)
	_logAddITaskClient("SCOPED", implType, _getImplementedITaskClientNames(implementedTypes...),
		_logITaskClientExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedITaskClientWithMetadata adds a type that implements ITaskClient
func AddScopedITaskClientWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskClient)
	_logAddITaskClient("SCOPED", implType, _getImplementedITaskClientNames(implementedTypes...),
		_logITaskClientExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedITaskClientByFunc adds a type by a custom func
func AddScopedITaskClientByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskClient)
	_logAddITaskClient("SCOPED", implType, _getImplementedITaskClientNames(implementedTypes...),
		_logITaskClientExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedITaskClientByFuncWithMetadata adds a type by a custom func
func AddScopedITaskClientByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskClient)
	_logAddITaskClient("SCOPED", implType, _getImplementedITaskClientNames(implementedTypes...),
		_logITaskClientExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllITaskClient removes all ITaskClient from the DI
func RemoveAllITaskClient(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeITaskClient)
}

// GetITaskClientFromContainer alternative to SafeGetITaskClientFromContainer but panics of object is not present
func GetITaskClientFromContainer(ctn di.Container) ITaskClient {
	return ctn.GetByType(ReflectTypeITaskClient).(ITaskClient)
}

// GetManyITaskClientFromContainer alternative to SafeGetManyITaskClientFromContainer but panics of object is not present
func GetManyITaskClientFromContainer(ctn di.Container) []ITaskClient {
	objs := ctn.GetManyByType(ReflectTypeITaskClient)
	var results []ITaskClient
	for _, obj := range objs {
		results = append(results, obj.(ITaskClient))
	}
	return results
}

// SafeGetITaskClientFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetITaskClientFromContainer(ctn di.Container) (ITaskClient, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeITaskClient)
	if err != nil {
		return nil, err
	}
	return obj.(ITaskClient), nil
}

// GetITaskClientDefinition returns that last definition registered that this container can provide
func GetITaskClientDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeITaskClient)
	return def
}

// GetITaskClientDefinitions returns all definitions that this container can provide
func GetITaskClientDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeITaskClient)
	return defs
}

// SafeGetManyITaskClientFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyITaskClientFromContainer(ctn di.Container) ([]ITaskClient, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeITaskClient)
	if err != nil {
		return nil, err
	}
	var results []ITaskClient
	for _, obj := range objs {
		results = append(results, obj.(ITaskClient))
	}
	return results, nil
}

type _logITaskClientExtra struct {
	Name  string
	Value interface{}
}

func _logAddITaskClient(scopeType string, implType reflect.Type, interfaces string, extra ..._logITaskClientExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedITaskClientNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}

// ReflectTypeITaskEngineFactory used when your service claims to implement ITaskEngineFactory
var ReflectTypeITaskEngineFactory = di.GetInterfaceReflectType((*ITaskEngineFactory)(nil))

// AddSingletonITaskEngineFactory adds a type that implements ITaskEngineFactory
func AddSingletonITaskEngineFactory(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskEngineFactory)
	_logAddITaskEngineFactory("SINGLETON", implType, _getImplementedITaskEngineFactoryNames(implementedTypes...),
		_logITaskEngineFactoryExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonITaskEngineFactoryWithMetadata adds a type that implements ITaskEngineFactory
func AddSingletonITaskEngineFactoryWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskEngineFactory)
	_logAddITaskEngineFactory("SINGLETON", implType, _getImplementedITaskEngineFactoryNames(implementedTypes...),
		_logITaskEngineFactoryExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITaskEngineFactoryExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonITaskEngineFactoryByObj adds a prebuilt obj
func AddSingletonITaskEngineFactoryByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskEngineFactory)
	_logAddITaskEngineFactory("SINGLETON", reflect.TypeOf(obj), _getImplementedITaskEngineFactoryNames(implementedTypes...),
		_logITaskEngineFactoryExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonITaskEngineFactoryByObjWithMetadata adds a prebuilt obj
func AddSingletonITaskEngineFactoryByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskEngineFactory)
	_logAddITaskEngineFactory("SINGLETON", reflect.TypeOf(obj), _getImplementedITaskEngineFactoryNames(implementedTypes...),
		_logITaskEngineFactoryExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logITaskEngineFactoryExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonITaskEngineFactoryByFunc adds a type by a custom func
func AddSingletonITaskEngineFactoryByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskEngineFactory)
	_logAddITaskEngineFactory("SINGLETON", implType, _getImplementedITaskEngineFactoryNames(implementedTypes...),
		_logITaskEngineFactoryExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonITaskEngineFactoryByFuncWithMetadata adds a type by a custom func
func AddSingletonITaskEngineFactoryByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskEngineFactory)
	_logAddITaskEngineFactory("SINGLETON", implType, _getImplementedITaskEngineFactoryNames(implementedTypes...),
		_logITaskEngineFactoryExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITaskEngineFactoryExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientITaskEngineFactory adds a type that implements ITaskEngineFactory
func AddTransientITaskEngineFactory(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskEngineFactory)
	_logAddITaskEngineFactory("TRANSIENT", implType, _getImplementedITaskEngineFactoryNames(implementedTypes...),
		_logITaskEngineFactoryExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientITaskEngineFactoryWithMetadata adds a type that implements ITaskEngineFactory
func AddTransientITaskEngineFactoryWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskEngineFactory)
	_logAddITaskEngineFactory("TRANSIENT", implType, _getImplementedITaskEngineFactoryNames(implementedTypes...),
		_logITaskEngineFactoryExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITaskEngineFactoryExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientITaskEngineFactoryByFunc adds a type by a custom func
func AddTransientITaskEngineFactoryByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskEngineFactory)
	_logAddITaskEngineFactory("TRANSIENT", implType, _getImplementedITaskEngineFactoryNames(implementedTypes...),
		_logITaskEngineFactoryExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientITaskEngineFactoryByFuncWithMetadata adds a type by a custom func
func AddTransientITaskEngineFactoryByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskEngineFactory)
	_logAddITaskEngineFactory("TRANSIENT", implType, _getImplementedITaskEngineFactoryNames(implementedTypes...),
		_logITaskEngineFactoryExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITaskEngineFactoryExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedITaskEngineFactory adds a type that implements ITaskEngineFactory
func AddScopedITaskEngineFactory(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskEngineFactory)
	_logAddITaskEngineFactory("SCOPED", implType, _getImplementedITaskEngineFactoryNames(implementedTypes...),
		_logITaskEngineFactoryExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedITaskEngineFactoryWithMetadata adds a type that implements ITaskEngineFactory
func AddScopedITaskEngineFactoryWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskEngineFactory)
	_logAddITaskEngineFactory("SCOPED", implType, _getImplementedITaskEngineFactoryNames(implementedTypes...),
		_logITaskEngineFactoryExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITaskEngineFactoryExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedITaskEngineFactoryByFunc adds a type by a custom func
func AddScopedITaskEngineFactoryByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskEngineFactory)
	_logAddITaskEngineFactory("SCOPED", implType, _getImplementedITaskEngineFactoryNames(implementedTypes...),
		_logITaskEngineFactoryExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedITaskEngineFactoryByFuncWithMetadata adds a type by a custom func
func AddScopedITaskEngineFactoryByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITaskEngineFactory)
	_logAddITaskEngineFactory("SCOPED", implType, _getImplementedITaskEngineFactoryNames(implementedTypes...),
		_logITaskEngineFactoryExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITaskEngineFactoryExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllITaskEngineFactory removes all ITaskEngineFactory from the DI
func RemoveAllITaskEngineFactory(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeITaskEngineFactory)
}

// GetITaskEngineFactoryFromContainer alternative to SafeGetITaskEngineFactoryFromContainer but panics of object is not present
func GetITaskEngineFactoryFromContainer(ctn di.Container) ITaskEngineFactory {
	return ctn.GetByType(ReflectTypeITaskEngineFactory).(ITaskEngineFactory)
}

// GetManyITaskEngineFactoryFromContainer alternative to SafeGetManyITaskEngineFactoryFromContainer but panics of object is not present
func GetManyITaskEngineFactoryFromContainer(ctn di.Container) []ITaskEngineFactory {
	objs := ctn.GetManyByType(ReflectTypeITaskEngineFactory)
	var results []ITaskEngineFactory
	for _, obj := range objs {
		results = append(results, obj.(ITaskEngineFactory))
	}
	return results
}

// SafeGetITaskEngineFactoryFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetITaskEngineFactoryFromContainer(ctn di.Container) (ITaskEngineFactory, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeITaskEngineFactory)
	if err != nil {
		return nil, err
	}
	return obj.(ITaskEngineFactory), nil
}

// GetITaskEngineFactoryDefinition returns that last definition registered that this container can provide
func GetITaskEngineFactoryDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeITaskEngineFactory)
	return def
}

// GetITaskEngineFactoryDefinitions returns all definitions that this container can provide
func GetITaskEngineFactoryDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeITaskEngineFactory)
	return defs
}

// SafeGetManyITaskEngineFactoryFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyITaskEngineFactoryFromContainer(ctn di.Container) ([]ITaskEngineFactory, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeITaskEngineFactory)
	if err != nil {
		return nil, err
	}
	var results []ITaskEngineFactory
	for _, obj := range objs {
		results = append(results, obj.(ITaskEngineFactory))
	}
	return results, nil
}

type _logITaskEngineFactoryExtra struct {
	Name  string
	Value interface{}
}

func _logAddITaskEngineFactory(scopeType string, implType reflect.Type, interfaces string, extra ..._logITaskEngineFactoryExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedITaskEngineFactoryNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}

// ReflectTypeIRedisTaskClient used when your service claims to implement IRedisTaskClient
var ReflectTypeIRedisTaskClient = di.GetInterfaceReflectType((*IRedisTaskClient)(nil))

// AddSingletonIRedisTaskClient adds a type that implements IRedisTaskClient
func AddSingletonIRedisTaskClient(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRedisTaskClient)
	_logAddIRedisTaskClient("SINGLETON", implType, _getImplementedIRedisTaskClientNames(implementedTypes...),
		_logIRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIRedisTaskClientWithMetadata adds a type that implements IRedisTaskClient
func AddSingletonIRedisTaskClientWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRedisTaskClient)
	_logAddIRedisTaskClient("SINGLETON", implType, _getImplementedIRedisTaskClientNames(implementedTypes...),
		_logIRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIRedisTaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIRedisTaskClientByObj adds a prebuilt obj
func AddSingletonIRedisTaskClientByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRedisTaskClient)
	_logAddIRedisTaskClient("SINGLETON", reflect.TypeOf(obj), _getImplementedIRedisTaskClientNames(implementedTypes...),
		_logIRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIRedisTaskClientByObjWithMetadata adds a prebuilt obj
func AddSingletonIRedisTaskClientByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRedisTaskClient)
	_logAddIRedisTaskClient("SINGLETON", reflect.TypeOf(obj), _getImplementedIRedisTaskClientNames(implementedTypes...),
		_logIRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIRedisTaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIRedisTaskClientByFunc adds a type by a custom func
func AddSingletonIRedisTaskClientByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRedisTaskClient)
	_logAddIRedisTaskClient("SINGLETON", implType, _getImplementedIRedisTaskClientNames(implementedTypes...),
		_logIRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIRedisTaskClientByFuncWithMetadata adds a type by a custom func
func AddSingletonIRedisTaskClientByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRedisTaskClient)
	_logAddIRedisTaskClient("SINGLETON", implType, _getImplementedIRedisTaskClientNames(implementedTypes...),
		_logIRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIRedisTaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIRedisTaskClient adds a type that implements IRedisTaskClient
func AddTransientIRedisTaskClient(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRedisTaskClient)
	_logAddIRedisTaskClient("TRANSIENT", implType, _getImplementedIRedisTaskClientNames(implementedTypes...),
		_logIRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIRedisTaskClientWithMetadata adds a type that implements IRedisTaskClient
func AddTransientIRedisTaskClientWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRedisTaskClient)
	_logAddIRedisTaskClient("TRANSIENT", implType, _getImplementedIRedisTaskClientNames(implementedTypes...),
		_logIRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIRedisTaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIRedisTaskClientByFunc adds a type by a custom func
func AddTransientIRedisTaskClientByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRedisTaskClient)
	_logAddIRedisTaskClient("TRANSIENT", implType, _getImplementedIRedisTaskClientNames(implementedTypes...),
		_logIRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIRedisTaskClientByFuncWithMetadata adds a type by a custom func
func AddTransientIRedisTaskClientByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRedisTaskClient)
	_logAddIRedisTaskClient("TRANSIENT", implType, _getImplementedIRedisTaskClientNames(implementedTypes...),
		_logIRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIRedisTaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIRedisTaskClient adds a type that implements IRedisTaskClient
func AddScopedIRedisTaskClient(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRedisTaskClient)
	_logAddIRedisTaskClient("SCOPED", implType, _getImplementedIRedisTaskClientNames(implementedTypes...),
		_logIRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIRedisTaskClientWithMetadata adds a type that implements IRedisTaskClient
func AddScopedIRedisTaskClientWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRedisTaskClient)
	_logAddIRedisTaskClient("SCOPED", implType, _getImplementedIRedisTaskClientNames(implementedTypes...),
		_logIRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIRedisTaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIRedisTaskClientByFunc adds a type by a custom func
func AddScopedIRedisTaskClientByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRedisTaskClient)
	_logAddIRedisTaskClient("SCOPED", implType, _getImplementedIRedisTaskClientNames(implementedTypes...),
		_logIRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIRedisTaskClientByFuncWithMetadata adds a type by a custom func
func AddScopedIRedisTaskClientByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRedisTaskClient)
	_logAddIRedisTaskClient("SCOPED", implType, _getImplementedIRedisTaskClientNames(implementedTypes...),
		_logIRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIRedisTaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIRedisTaskClient removes all IRedisTaskClient from the DI
func RemoveAllIRedisTaskClient(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIRedisTaskClient)
}

// GetIRedisTaskClientFromContainer alternative to SafeGetIRedisTaskClientFromContainer but panics of object is not present
func GetIRedisTaskClientFromContainer(ctn di.Container) IRedisTaskClient {
	return ctn.GetByType(ReflectTypeIRedisTaskClient).(IRedisTaskClient)
}

// GetManyIRedisTaskClientFromContainer alternative to SafeGetManyIRedisTaskClientFromContainer but panics of object is not present
func GetManyIRedisTaskClientFromContainer(ctn di.Container) []IRedisTaskClient {
	objs := ctn.GetManyByType(ReflectTypeIRedisTaskClient)
	var results []IRedisTaskClient
	for _, obj := range objs {
		results = append(results, obj.(IRedisTaskClient))
	}
	return results
}

// SafeGetIRedisTaskClientFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIRedisTaskClientFromContainer(ctn di.Container) (IRedisTaskClient, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIRedisTaskClient)
	if err != nil {
		return nil, err
	}
	return obj.(IRedisTaskClient), nil
}

// GetIRedisTaskClientDefinition returns that last definition registered that this container can provide
func GetIRedisTaskClientDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIRedisTaskClient)
	return def
}

// GetIRedisTaskClientDefinitions returns all definitions that this container can provide
func GetIRedisTaskClientDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIRedisTaskClient)
	return defs
}

// SafeGetManyIRedisTaskClientFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIRedisTaskClientFromContainer(ctn di.Container) ([]IRedisTaskClient, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIRedisTaskClient)
	if err != nil {
		return nil, err
	}
	var results []IRedisTaskClient
	for _, obj := range objs {
		results = append(results, obj.(IRedisTaskClient))
	}
	return results, nil
}

type _logIRedisTaskClientExtra struct {
	Name  string
	Value interface{}
}

func _logAddIRedisTaskClient(scopeType string, implType reflect.Type, interfaces string, extra ..._logIRedisTaskClientExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIRedisTaskClientNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}

// ReflectTypeIMiniRedisTaskClient used when your service claims to implement IMiniRedisTaskClient
var ReflectTypeIMiniRedisTaskClient = di.GetInterfaceReflectType((*IMiniRedisTaskClient)(nil))

// AddSingletonIMiniRedisTaskClient adds a type that implements IMiniRedisTaskClient
func AddSingletonIMiniRedisTaskClient(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMiniRedisTaskClient)
	_logAddIMiniRedisTaskClient("SINGLETON", implType, _getImplementedIMiniRedisTaskClientNames(implementedTypes...),
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIMiniRedisTaskClientWithMetadata adds a type that implements IMiniRedisTaskClient
func AddSingletonIMiniRedisTaskClientWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMiniRedisTaskClient)
	_logAddIMiniRedisTaskClient("SINGLETON", implType, _getImplementedIMiniRedisTaskClientNames(implementedTypes...),
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIMiniRedisTaskClientByObj adds a prebuilt obj
func AddSingletonIMiniRedisTaskClientByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMiniRedisTaskClient)
	_logAddIMiniRedisTaskClient("SINGLETON", reflect.TypeOf(obj), _getImplementedIMiniRedisTaskClientNames(implementedTypes...),
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIMiniRedisTaskClientByObjWithMetadata adds a prebuilt obj
func AddSingletonIMiniRedisTaskClientByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMiniRedisTaskClient)
	_logAddIMiniRedisTaskClient("SINGLETON", reflect.TypeOf(obj), _getImplementedIMiniRedisTaskClientNames(implementedTypes...),
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIMiniRedisTaskClientByFunc adds a type by a custom func
func AddSingletonIMiniRedisTaskClientByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMiniRedisTaskClient)
	_logAddIMiniRedisTaskClient("SINGLETON", implType, _getImplementedIMiniRedisTaskClientNames(implementedTypes...),
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIMiniRedisTaskClientByFuncWithMetadata adds a type by a custom func
func AddSingletonIMiniRedisTaskClientByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMiniRedisTaskClient)
	_logAddIMiniRedisTaskClient("SINGLETON", implType, _getImplementedIMiniRedisTaskClientNames(implementedTypes...),
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIMiniRedisTaskClient adds a type that implements IMiniRedisTaskClient
func AddTransientIMiniRedisTaskClient(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMiniRedisTaskClient)
	_logAddIMiniRedisTaskClient("TRANSIENT", implType, _getImplementedIMiniRedisTaskClientNames(implementedTypes...),
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIMiniRedisTaskClientWithMetadata adds a type that implements IMiniRedisTaskClient
func AddTransientIMiniRedisTaskClientWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMiniRedisTaskClient)
	_logAddIMiniRedisTaskClient("TRANSIENT", implType, _getImplementedIMiniRedisTaskClientNames(implementedTypes...),
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIMiniRedisTaskClientByFunc adds a type by a custom func
func AddTransientIMiniRedisTaskClientByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMiniRedisTaskClient)
	_logAddIMiniRedisTaskClient("TRANSIENT", implType, _getImplementedIMiniRedisTaskClientNames(implementedTypes...),
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIMiniRedisTaskClientByFuncWithMetadata adds a type by a custom func
func AddTransientIMiniRedisTaskClientByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMiniRedisTaskClient)
	_logAddIMiniRedisTaskClient("TRANSIENT", implType, _getImplementedIMiniRedisTaskClientNames(implementedTypes...),
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIMiniRedisTaskClient adds a type that implements IMiniRedisTaskClient
func AddScopedIMiniRedisTaskClient(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMiniRedisTaskClient)
	_logAddIMiniRedisTaskClient("SCOPED", implType, _getImplementedIMiniRedisTaskClientNames(implementedTypes...),
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIMiniRedisTaskClientWithMetadata adds a type that implements IMiniRedisTaskClient
func AddScopedIMiniRedisTaskClientWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMiniRedisTaskClient)
	_logAddIMiniRedisTaskClient("SCOPED", implType, _getImplementedIMiniRedisTaskClientNames(implementedTypes...),
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIMiniRedisTaskClientByFunc adds a type by a custom func
func AddScopedIMiniRedisTaskClientByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMiniRedisTaskClient)
	_logAddIMiniRedisTaskClient("SCOPED", implType, _getImplementedIMiniRedisTaskClientNames(implementedTypes...),
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIMiniRedisTaskClientByFuncWithMetadata adds a type by a custom func
func AddScopedIMiniRedisTaskClientByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMiniRedisTaskClient)
	_logAddIMiniRedisTaskClient("SCOPED", implType, _getImplementedIMiniRedisTaskClientNames(implementedTypes...),
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIMiniRedisTaskClientExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIMiniRedisTaskClient removes all IMiniRedisTaskClient from the DI
func RemoveAllIMiniRedisTaskClient(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIMiniRedisTaskClient)
}

// GetIMiniRedisTaskClientFromContainer alternative to SafeGetIMiniRedisTaskClientFromContainer but panics of object is not present
func GetIMiniRedisTaskClientFromContainer(ctn di.Container) IMiniRedisTaskClient {
	return ctn.GetByType(ReflectTypeIMiniRedisTaskClient).(IMiniRedisTaskClient)
}

// GetManyIMiniRedisTaskClientFromContainer alternative to SafeGetManyIMiniRedisTaskClientFromContainer but panics of object is not present
func GetManyIMiniRedisTaskClientFromContainer(ctn di.Container) []IMiniRedisTaskClient {
	objs := ctn.GetManyByType(ReflectTypeIMiniRedisTaskClient)
	var results []IMiniRedisTaskClient
	for _, obj := range objs {
		results = append(results, obj.(IMiniRedisTaskClient))
	}
	return results
}

// SafeGetIMiniRedisTaskClientFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIMiniRedisTaskClientFromContainer(ctn di.Container) (IMiniRedisTaskClient, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIMiniRedisTaskClient)
	if err != nil {
		return nil, err
	}
	return obj.(IMiniRedisTaskClient), nil
}

// GetIMiniRedisTaskClientDefinition returns that last definition registered that this container can provide
func GetIMiniRedisTaskClientDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIMiniRedisTaskClient)
	return def
}

// GetIMiniRedisTaskClientDefinitions returns all definitions that this container can provide
func GetIMiniRedisTaskClientDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIMiniRedisTaskClient)
	return defs
}

// SafeGetManyIMiniRedisTaskClientFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIMiniRedisTaskClientFromContainer(ctn di.Container) ([]IMiniRedisTaskClient, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIMiniRedisTaskClient)
	if err != nil {
		return nil, err
	}
	var results []IMiniRedisTaskClient
	for _, obj := range objs {
		results = append(results, obj.(IMiniRedisTaskClient))
	}
	return results, nil
}

type _logIMiniRedisTaskClientExtra struct {
	Name  string
	Value interface{}
}

func _logAddIMiniRedisTaskClient(scopeType string, implType reflect.Type, interfaces string, extra ..._logIMiniRedisTaskClientExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIMiniRedisTaskClientNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}
