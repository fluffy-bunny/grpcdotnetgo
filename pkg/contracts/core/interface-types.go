// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package core

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeIHealthServer used when your service claims to implement IHealthServer
var ReflectTypeIHealthServer = di.GetInterfaceReflectType((*IHealthServer)(nil))

// AddSingletonIHealthServerByObj adds a prebuilt obj
func AddSingletonIHealthServerByObj(builder *di.Builder, obj interface{}) {
	di.AddSingletonWithImplementedTypesByObj(builder, obj, ReflectTypeIHealthServer)
}

// AddSingletonIHealthServer adds a type that implements IHealthServer
func AddSingletonIHealthServer(builder *di.Builder, implType reflect.Type) {
	di.AddSingletonWithImplementedTypes(builder, implType, ReflectTypeIHealthServer)
}

// AddSingletonIHealthServerByFunc adds a type by a custom func
func AddSingletonIHealthServerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIHealthServer)
}

// AddTransientIHealthServer adds a type that implements IHealthServer
func AddTransientIHealthServer(builder *di.Builder, implType reflect.Type) {
	di.AddTransientWithImplementedTypes(builder, implType, ReflectTypeIHealthServer)
}

// AddTransientIHealthServerByFunc adds a type by a custom func
func AddTransientIHealthServerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIHealthServer)
}

// AddScopedIHealthServer adds a type that implements IHealthServer
func AddScopedIHealthServer(builder *di.Builder, implType reflect.Type) {
	di.AddScopedWithImplementedTypes(builder, implType, ReflectTypeIHealthServer)
}

// AddScopedIHealthServerByFunc adds a type by a custom func
func AddScopedIHealthServerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIHealthServer)
}

// GetIHealthServerFromContainer alternative to SafeGetIHealthServerFromContainer but panics of object is not present
func GetIHealthServerFromContainer(ctn di.Container) IHealthServer {
	return ctn.GetByType(ReflectTypeIHealthServer).(IHealthServer)
}

// SafeGetIHealthServerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIHealthServerFromContainer(ctn di.Container) (IHealthServer, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIHealthServer)
	if err != nil {
		return nil, err
	}
	return obj.(IHealthServer), nil
}

// ReflectTypeIStartup used when your service claims to implement IStartup
var ReflectTypeIStartup = di.GetInterfaceReflectType((*IStartup)(nil))

// AddSingletonIStartupByObj adds a prebuilt obj
func AddSingletonIStartupByObj(builder *di.Builder, obj interface{}) {
	di.AddSingletonWithImplementedTypesByObj(builder, obj, ReflectTypeIStartup)
}

// AddSingletonIStartup adds a type that implements IStartup
func AddSingletonIStartup(builder *di.Builder, implType reflect.Type) {
	di.AddSingletonWithImplementedTypes(builder, implType, ReflectTypeIStartup)
}

// AddSingletonIStartupByFunc adds a type by a custom func
func AddSingletonIStartupByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIStartup)
}

// AddTransientIStartup adds a type that implements IStartup
func AddTransientIStartup(builder *di.Builder, implType reflect.Type) {
	di.AddTransientWithImplementedTypes(builder, implType, ReflectTypeIStartup)
}

// AddTransientIStartupByFunc adds a type by a custom func
func AddTransientIStartupByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIStartup)
}

// AddScopedIStartup adds a type that implements IStartup
func AddScopedIStartup(builder *di.Builder, implType reflect.Type) {
	di.AddScopedWithImplementedTypes(builder, implType, ReflectTypeIStartup)
}

// AddScopedIStartupByFunc adds a type by a custom func
func AddScopedIStartupByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIStartup)
}

// GetIStartupFromContainer alternative to SafeGetIStartupFromContainer but panics of object is not present
func GetIStartupFromContainer(ctn di.Container) IStartup {
	return ctn.GetByType(ReflectTypeIStartup).(IStartup)
}

// SafeGetIStartupFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIStartupFromContainer(ctn di.Container) (IStartup, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIStartup)
	if err != nil {
		return nil, err
	}
	return obj.(IStartup), nil
}

// ReflectTypeICoreConfig used when your service claims to implement ICoreConfig
var ReflectTypeICoreConfig = di.GetInterfaceReflectType((*ICoreConfig)(nil))

// AddSingletonICoreConfigByObj adds a prebuilt obj
func AddSingletonICoreConfigByObj(builder *di.Builder, obj interface{}) {
	di.AddSingletonWithImplementedTypesByObj(builder, obj, ReflectTypeICoreConfig)
}

// AddSingletonICoreConfig adds a type that implements ICoreConfig
func AddSingletonICoreConfig(builder *di.Builder, implType reflect.Type) {
	di.AddSingletonWithImplementedTypes(builder, implType, ReflectTypeICoreConfig)
}

// AddSingletonICoreConfigByFunc adds a type by a custom func
func AddSingletonICoreConfigByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, ReflectTypeICoreConfig)
}

// AddTransientICoreConfig adds a type that implements ICoreConfig
func AddTransientICoreConfig(builder *di.Builder, implType reflect.Type) {
	di.AddTransientWithImplementedTypes(builder, implType, ReflectTypeICoreConfig)
}

// AddTransientICoreConfigByFunc adds a type by a custom func
func AddTransientICoreConfigByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, ReflectTypeICoreConfig)
}

// AddScopedICoreConfig adds a type that implements ICoreConfig
func AddScopedICoreConfig(builder *di.Builder, implType reflect.Type) {
	di.AddScopedWithImplementedTypes(builder, implType, ReflectTypeICoreConfig)
}

// AddScopedICoreConfigByFunc adds a type by a custom func
func AddScopedICoreConfigByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, ReflectTypeICoreConfig)
}

// GetICoreConfigFromContainer alternative to SafeGetICoreConfigFromContainer but panics of object is not present
func GetICoreConfigFromContainer(ctn di.Container) ICoreConfig {
	return ctn.GetByType(ReflectTypeICoreConfig).(ICoreConfig)
}

// SafeGetICoreConfigFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetICoreConfigFromContainer(ctn di.Container) (ICoreConfig, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeICoreConfig)
	if err != nil {
		return nil, err
	}
	return obj.(ICoreConfig), nil
}

// ReflectTypeIUnaryServerInterceptorBuilder used when your service claims to implement IUnaryServerInterceptorBuilder
var ReflectTypeIUnaryServerInterceptorBuilder = di.GetInterfaceReflectType((*IUnaryServerInterceptorBuilder)(nil))

// AddSingletonIUnaryServerInterceptorBuilderByObj adds a prebuilt obj
func AddSingletonIUnaryServerInterceptorBuilderByObj(builder *di.Builder, obj interface{}) {
	di.AddSingletonWithImplementedTypesByObj(builder, obj, ReflectTypeIUnaryServerInterceptorBuilder)
}

// AddSingletonIUnaryServerInterceptorBuilder adds a type that implements IUnaryServerInterceptorBuilder
func AddSingletonIUnaryServerInterceptorBuilder(builder *di.Builder, implType reflect.Type) {
	di.AddSingletonWithImplementedTypes(builder, implType, ReflectTypeIUnaryServerInterceptorBuilder)
}

// AddSingletonIUnaryServerInterceptorBuilderByFunc adds a type by a custom func
func AddSingletonIUnaryServerInterceptorBuilderByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIUnaryServerInterceptorBuilder)
}

// AddTransientIUnaryServerInterceptorBuilder adds a type that implements IUnaryServerInterceptorBuilder
func AddTransientIUnaryServerInterceptorBuilder(builder *di.Builder, implType reflect.Type) {
	di.AddTransientWithImplementedTypes(builder, implType, ReflectTypeIUnaryServerInterceptorBuilder)
}

// AddTransientIUnaryServerInterceptorBuilderByFunc adds a type by a custom func
func AddTransientIUnaryServerInterceptorBuilderByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIUnaryServerInterceptorBuilder)
}

// AddScopedIUnaryServerInterceptorBuilder adds a type that implements IUnaryServerInterceptorBuilder
func AddScopedIUnaryServerInterceptorBuilder(builder *di.Builder, implType reflect.Type) {
	di.AddScopedWithImplementedTypes(builder, implType, ReflectTypeIUnaryServerInterceptorBuilder)
}

// AddScopedIUnaryServerInterceptorBuilderByFunc adds a type by a custom func
func AddScopedIUnaryServerInterceptorBuilderByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIUnaryServerInterceptorBuilder)
}

// GetIUnaryServerInterceptorBuilderFromContainer alternative to SafeGetIUnaryServerInterceptorBuilderFromContainer but panics of object is not present
func GetIUnaryServerInterceptorBuilderFromContainer(ctn di.Container) IUnaryServerInterceptorBuilder {
	return ctn.GetByType(ReflectTypeIUnaryServerInterceptorBuilder).(IUnaryServerInterceptorBuilder)
}

// SafeGetIUnaryServerInterceptorBuilderFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIUnaryServerInterceptorBuilderFromContainer(ctn di.Container) (IUnaryServerInterceptorBuilder, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIUnaryServerInterceptorBuilder)
	if err != nil {
		return nil, err
	}
	return obj.(IUnaryServerInterceptorBuilder), nil
}
