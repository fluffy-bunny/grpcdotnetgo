// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package core

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeIHealthServer used when your service claims to implement IHealthServer
var ReflectTypeIHealthServer = di.GetInterfaceReflectType((*IHealthServer)(nil))

// AddSingletonIHealthServer adds a type that implements IHealthServer
func AddSingletonIHealthServer(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIHealthServer)
	di.AddSingletonWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddSingletonIHealthServerByObj adds a prebuilt obj
func AddSingletonIHealthServerByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIHealthServer)
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIHealthServerByFunc adds a type by a custom func
func AddSingletonIHealthServerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIHealthServer)
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIHealthServer adds a type that implements IHealthServer
func AddTransientIHealthServer(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIHealthServer)
	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIHealthServerByFunc adds a type by a custom func
func AddTransientIHealthServerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIHealthServer)
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIHealthServer adds a type that implements IHealthServer
func AddScopedIHealthServer(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIHealthServer)
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIHealthServerByFunc adds a type by a custom func
func AddScopedIHealthServerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIHealthServer)
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// RemoveAllIHealthServer removes all IHealthServer from the DI
func RemoveAllIHealthServer(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIHealthServer)
}

// GetIHealthServerFromContainer alternative to SafeGetIHealthServerFromContainer but panics of object is not present
func GetIHealthServerFromContainer(ctn di.Container) IHealthServer {
	return ctn.GetByType(ReflectTypeIHealthServer).(IHealthServer)
}

// GetManyIHealthServerFromContainer alternative to SafeGetManyIHealthServerFromContainer but panics of object is not present
func GetManyIHealthServerFromContainer(ctn di.Container) []IHealthServer {
	objs := ctn.GetManyByType(ReflectTypeIHealthServer)
	var results []IHealthServer
	for _, obj := range objs {
		results = append(results, obj.(IHealthServer))
	}
	return results
}

// SafeGetIHealthServerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIHealthServerFromContainer(ctn di.Container) (IHealthServer, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIHealthServer)
	if err != nil {
		return nil, err
	}
	return obj.(IHealthServer), nil
}

// SafeGetManyIHealthServerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIHealthServerFromContainer(ctn di.Container) ([]IHealthServer, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIHealthServer)
	if err != nil {
		return nil, err
	}
	var results []IHealthServer
	for _, obj := range objs {
		results = append(results, obj.(IHealthServer))
	}
	return results, nil
}
