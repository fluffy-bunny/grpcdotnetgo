// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package backgroundtasks

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeIBackgroundTasks used when your service claims to implement IBackgroundTasks
var ReflectTypeIBackgroundTasks = di.GetInterfaceReflectType((*IBackgroundTasks)(nil))

// AddSingletonIBackgroundTasksByObj adds a prebuilt obj
func AddSingletonIBackgroundTasksByObj(builder *di.Builder, obj interface{}) {
	di.AddSingletonWithImplementedTypesByObj(builder, obj, ReflectTypeIBackgroundTasks)
}

// AddSingletonIBackgroundTasks adds a type that implements IBackgroundTasks
func AddSingletonIBackgroundTasks(builder *di.Builder, implType reflect.Type) {
	di.AddSingletonWithImplementedTypes(builder, implType, ReflectTypeIBackgroundTasks)
}

// AddSingletonIBackgroundTasksByFunc adds a type by a custom func
func AddSingletonIBackgroundTasksByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIBackgroundTasks)
}

// AddTransientIBackgroundTasks adds a type that implements IBackgroundTasks
func AddTransientIBackgroundTasks(builder *di.Builder, implType reflect.Type) {
	di.AddTransientWithImplementedTypes(builder, implType, ReflectTypeIBackgroundTasks)
}

// AddTransientIBackgroundTasksByFunc adds a type by a custom func
func AddTransientIBackgroundTasksByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIBackgroundTasks)
}

// AddScopedIBackgroundTasks adds a type that implements IBackgroundTasks
func AddScopedIBackgroundTasks(builder *di.Builder, implType reflect.Type) {
	di.AddScopedWithImplementedTypes(builder, implType, ReflectTypeIBackgroundTasks)
}

// AddScopedIBackgroundTasksByFunc adds a type by a custom func
func AddScopedIBackgroundTasksByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIBackgroundTasks)
}

// RemoveAllIBackgroundTasks removes all IBackgroundTasks from the DI
func RemoveAllIBackgroundTasks(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIBackgroundTasks)
}

// GetIBackgroundTasksFromContainer alternative to SafeGetIBackgroundTasksFromContainer but panics of object is not present
func GetIBackgroundTasksFromContainer(ctn di.Container) IBackgroundTasks {
	return ctn.GetByType(ReflectTypeIBackgroundTasks).(IBackgroundTasks)
}

// GetManyIBackgroundTasksFromContainer alternative to SafeGetManyIBackgroundTasksFromContainer but panics of object is not present
func GetManyIBackgroundTasksFromContainer(ctn di.Container) []IBackgroundTasks {
	objs := ctn.GetManyByType(ReflectTypeIBackgroundTasks)
	var results []IBackgroundTasks
	for _, obj := range objs {
		results = append(results, obj.(IBackgroundTasks))
	}
	return results
}

// SafeGetIBackgroundTasksFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIBackgroundTasksFromContainer(ctn di.Container) (IBackgroundTasks, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIBackgroundTasks)
	if err != nil {
		return nil, err
	}
	return obj.(IBackgroundTasks), nil
}

// SafeGetManyIBackgroundTasksFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIBackgroundTasksFromContainer(ctn di.Container) ([]IBackgroundTasks, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIBackgroundTasks)
	if err != nil {
		return nil, err
	}
	var results []IBackgroundTasks
	for _, obj := range objs {
		results = append(results, obj.(IBackgroundTasks))
	}
	return results, nil
}
