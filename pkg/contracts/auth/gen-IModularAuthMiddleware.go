// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package auth

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeIModularAuthMiddleware used when your service claims to implement IModularAuthMiddleware
var ReflectTypeIModularAuthMiddleware = di.GetInterfaceReflectType((*IModularAuthMiddleware)(nil))

// AddSingletonIModularAuthMiddleware adds a type that implements IModularAuthMiddleware
func AddSingletonIModularAuthMiddleware(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIModularAuthMiddleware)
	di.AddSingletonWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddSingletonIModularAuthMiddlewareByObj adds a prebuilt obj
func AddSingletonIModularAuthMiddlewareByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIModularAuthMiddleware)
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIModularAuthMiddlewareByFunc adds a type by a custom func
func AddSingletonIModularAuthMiddlewareByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIModularAuthMiddleware)
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIModularAuthMiddleware adds a type that implements IModularAuthMiddleware
func AddTransientIModularAuthMiddleware(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIModularAuthMiddleware)
	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIModularAuthMiddlewareByFunc adds a type by a custom func
func AddTransientIModularAuthMiddlewareByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIModularAuthMiddleware)
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIModularAuthMiddleware adds a type that implements IModularAuthMiddleware
func AddScopedIModularAuthMiddleware(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIModularAuthMiddleware)
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIModularAuthMiddlewareByFunc adds a type by a custom func
func AddScopedIModularAuthMiddlewareByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIModularAuthMiddleware)
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// RemoveAllIModularAuthMiddleware removes all IModularAuthMiddleware from the DI
func RemoveAllIModularAuthMiddleware(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIModularAuthMiddleware)
}

// GetIModularAuthMiddlewareFromContainer alternative to SafeGetIModularAuthMiddlewareFromContainer but panics of object is not present
func GetIModularAuthMiddlewareFromContainer(ctn di.Container) IModularAuthMiddleware {
	return ctn.GetByType(ReflectTypeIModularAuthMiddleware).(IModularAuthMiddleware)
}

// GetManyIModularAuthMiddlewareFromContainer alternative to SafeGetManyIModularAuthMiddlewareFromContainer but panics of object is not present
func GetManyIModularAuthMiddlewareFromContainer(ctn di.Container) []IModularAuthMiddleware {
	objs := ctn.GetManyByType(ReflectTypeIModularAuthMiddleware)
	var results []IModularAuthMiddleware
	for _, obj := range objs {
		results = append(results, obj.(IModularAuthMiddleware))
	}
	return results
}

// SafeGetIModularAuthMiddlewareFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIModularAuthMiddlewareFromContainer(ctn di.Container) (IModularAuthMiddleware, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIModularAuthMiddleware)
	if err != nil {
		return nil, err
	}
	return obj.(IModularAuthMiddleware), nil
}

// SafeGetManyIModularAuthMiddlewareFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIModularAuthMiddlewareFromContainer(ctn di.Container) ([]IModularAuthMiddleware, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIModularAuthMiddleware)
	if err != nil {
		return nil, err
	}
	var results []IModularAuthMiddleware
	for _, obj := range objs {
		results = append(results, obj.(IModularAuthMiddleware))
	}
	return results, nil
}
