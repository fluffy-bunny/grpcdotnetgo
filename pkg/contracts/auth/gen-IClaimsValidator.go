// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package auth

import (
	"reflect"
	"strings"

	di "github.com/fluffy-bunny/sarulabsdi"
	"github.com/rs/zerolog/log"
)

// ReflectTypeIClaimsValidator used when your service claims to implement IClaimsValidator
var ReflectTypeIClaimsValidator = di.GetInterfaceReflectType((*IClaimsValidator)(nil))

// AddSingletonIClaimsValidator adds a type that implements IClaimsValidator
func AddSingletonIClaimsValidator(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClaimsValidator)
	_logAddIClaimsValidator("SINGLETON", implType, _getImplementedIClaimsValidatorNames(implementedTypes...),
		_logIClaimsValidatorExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIClaimsValidatorWithMetadata adds a type that implements IClaimsValidator
func AddSingletonIClaimsValidatorWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClaimsValidator)
	_logAddIClaimsValidator("SINGLETON", implType, _getImplementedIClaimsValidatorNames(implementedTypes...),
		_logIClaimsValidatorExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClaimsValidatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIClaimsValidatorByObj adds a prebuilt obj
func AddSingletonIClaimsValidatorByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClaimsValidator)
	_logAddIClaimsValidator("SINGLETON", reflect.TypeOf(obj), _getImplementedIClaimsValidatorNames(implementedTypes...),
		_logIClaimsValidatorExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIClaimsValidatorByObjWithMetadata adds a prebuilt obj
func AddSingletonIClaimsValidatorByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClaimsValidator)
	_logAddIClaimsValidator("SINGLETON", reflect.TypeOf(obj), _getImplementedIClaimsValidatorNames(implementedTypes...),
		_logIClaimsValidatorExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIClaimsValidatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIClaimsValidatorByFunc adds a type by a custom func
func AddSingletonIClaimsValidatorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClaimsValidator)
	_logAddIClaimsValidator("SINGLETON", implType, _getImplementedIClaimsValidatorNames(implementedTypes...),
		_logIClaimsValidatorExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIClaimsValidatorByFuncWithMetadata adds a type by a custom func
func AddSingletonIClaimsValidatorByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClaimsValidator)
	_logAddIClaimsValidator("SINGLETON", implType, _getImplementedIClaimsValidatorNames(implementedTypes...),
		_logIClaimsValidatorExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClaimsValidatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIClaimsValidator adds a type that implements IClaimsValidator
func AddTransientIClaimsValidator(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClaimsValidator)
	_logAddIClaimsValidator("TRANSIENT", implType, _getImplementedIClaimsValidatorNames(implementedTypes...),
		_logIClaimsValidatorExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIClaimsValidatorWithMetadata adds a type that implements IClaimsValidator
func AddTransientIClaimsValidatorWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClaimsValidator)
	_logAddIClaimsValidator("TRANSIENT", implType, _getImplementedIClaimsValidatorNames(implementedTypes...),
		_logIClaimsValidatorExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClaimsValidatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIClaimsValidatorByFunc adds a type by a custom func
func AddTransientIClaimsValidatorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClaimsValidator)
	_logAddIClaimsValidator("TRANSIENT", implType, _getImplementedIClaimsValidatorNames(implementedTypes...),
		_logIClaimsValidatorExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIClaimsValidatorByFuncWithMetadata adds a type by a custom func
func AddTransientIClaimsValidatorByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClaimsValidator)
	_logAddIClaimsValidator("TRANSIENT", implType, _getImplementedIClaimsValidatorNames(implementedTypes...),
		_logIClaimsValidatorExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClaimsValidatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIClaimsValidator adds a type that implements IClaimsValidator
func AddScopedIClaimsValidator(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClaimsValidator)
	_logAddIClaimsValidator("SCOPED", implType, _getImplementedIClaimsValidatorNames(implementedTypes...),
		_logIClaimsValidatorExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIClaimsValidatorWithMetadata adds a type that implements IClaimsValidator
func AddScopedIClaimsValidatorWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClaimsValidator)
	_logAddIClaimsValidator("SCOPED", implType, _getImplementedIClaimsValidatorNames(implementedTypes...),
		_logIClaimsValidatorExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClaimsValidatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIClaimsValidatorByFunc adds a type by a custom func
func AddScopedIClaimsValidatorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClaimsValidator)
	_logAddIClaimsValidator("SCOPED", implType, _getImplementedIClaimsValidatorNames(implementedTypes...),
		_logIClaimsValidatorExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIClaimsValidatorByFuncWithMetadata adds a type by a custom func
func AddScopedIClaimsValidatorByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClaimsValidator)
	_logAddIClaimsValidator("SCOPED", implType, _getImplementedIClaimsValidatorNames(implementedTypes...),
		_logIClaimsValidatorExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClaimsValidatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIClaimsValidator removes all IClaimsValidator from the DI
func RemoveAllIClaimsValidator(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIClaimsValidator)
}

// GetIClaimsValidatorFromContainer alternative to SafeGetIClaimsValidatorFromContainer but panics of object is not present
func GetIClaimsValidatorFromContainer(ctn di.Container) IClaimsValidator {
	return ctn.GetByType(ReflectTypeIClaimsValidator).(IClaimsValidator)
}

// GetManyIClaimsValidatorFromContainer alternative to SafeGetManyIClaimsValidatorFromContainer but panics of object is not present
func GetManyIClaimsValidatorFromContainer(ctn di.Container) []IClaimsValidator {
	objs := ctn.GetManyByType(ReflectTypeIClaimsValidator)
	var results []IClaimsValidator
	for _, obj := range objs {
		results = append(results, obj.(IClaimsValidator))
	}
	return results
}

// SafeGetIClaimsValidatorFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIClaimsValidatorFromContainer(ctn di.Container) (IClaimsValidator, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIClaimsValidator)
	if err != nil {
		return nil, err
	}
	return obj.(IClaimsValidator), nil
}

// GetIClaimsValidatorDefinition returns that last definition registered that this container can provide
func GetIClaimsValidatorDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIClaimsValidator)
	return def
}

// GetIClaimsValidatorDefinitions returns all definitions that this container can provide
func GetIClaimsValidatorDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIClaimsValidator)
	return defs
}

// SafeGetManyIClaimsValidatorFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIClaimsValidatorFromContainer(ctn di.Container) ([]IClaimsValidator, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIClaimsValidator)
	if err != nil {
		return nil, err
	}
	var results []IClaimsValidator
	for _, obj := range objs {
		results = append(results, obj.(IClaimsValidator))
	}
	return results, nil
}

type _logIClaimsValidatorExtra struct {
	Name  string
	Value interface{}
}

func _logAddIClaimsValidator(scopeType string, implType reflect.Type, interfaces string, extra ..._logIClaimsValidatorExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIClaimsValidatorNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}
