// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package uuid

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeIKSUID used when your service claims to implement IKSUID
var ReflectTypeIKSUID = di.GetInterfaceReflectType((*IKSUID)(nil))

// AddSingletonIKSUID adds a type that implements IKSUID
func AddSingletonIKSUID(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKSUID)
	di.AddSingletonWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddSingletonIKSUIDByObj adds a prebuilt obj
func AddSingletonIKSUIDByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKSUID)
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIKSUIDByFunc adds a type by a custom func
func AddSingletonIKSUIDByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKSUID)
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIKSUID adds a type that implements IKSUID
func AddTransientIKSUID(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKSUID)
	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIKSUIDByFunc adds a type by a custom func
func AddTransientIKSUIDByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKSUID)
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIKSUID adds a type that implements IKSUID
func AddScopedIKSUID(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKSUID)
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIKSUIDByFunc adds a type by a custom func
func AddScopedIKSUIDByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKSUID)
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// RemoveAllIKSUID removes all IKSUID from the DI
func RemoveAllIKSUID(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIKSUID)
}

// GetIKSUIDFromContainer alternative to SafeGetIKSUIDFromContainer but panics of object is not present
func GetIKSUIDFromContainer(ctn di.Container) IKSUID {
	return ctn.GetByType(ReflectTypeIKSUID).(IKSUID)
}

// GetManyIKSUIDFromContainer alternative to SafeGetManyIKSUIDFromContainer but panics of object is not present
func GetManyIKSUIDFromContainer(ctn di.Container) []IKSUID {
	objs := ctn.GetManyByType(ReflectTypeIKSUID)
	var results []IKSUID
	for _, obj := range objs {
		results = append(results, obj.(IKSUID))
	}
	return results
}

// SafeGetIKSUIDFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIKSUIDFromContainer(ctn di.Container) (IKSUID, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIKSUID)
	if err != nil {
		return nil, err
	}
	return obj.(IKSUID), nil
}

// SafeGetManyIKSUIDFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIKSUIDFromContainer(ctn di.Container) ([]IKSUID, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIKSUID)
	if err != nil {
		return nil, err
	}
	var results []IKSUID
	for _, obj := range objs {
		results = append(results, obj.(IKSUID))
	}
	return results, nil
}
