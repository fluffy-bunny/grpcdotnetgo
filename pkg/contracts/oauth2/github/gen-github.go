// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package github

import (
	"reflect"
	"strings"

	di "github.com/fluffy-bunny/sarulabsdi"
	"github.com/rs/zerolog/log"
)

// ReflectTypeIGithubOAuth2Authenticator used when your service claims to implement IGithubOAuth2Authenticator
var ReflectTypeIGithubOAuth2Authenticator = di.GetInterfaceReflectType((*IGithubOAuth2Authenticator)(nil))

// AddSingletonIGithubOAuth2Authenticator adds a type that implements IGithubOAuth2Authenticator
func AddSingletonIGithubOAuth2Authenticator(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIGithubOAuth2Authenticator)
	_logAddIGithubOAuth2Authenticator("SINGLETON", implType, _getImplementedIGithubOAuth2AuthenticatorNames(implementedTypes...),
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIGithubOAuth2AuthenticatorWithMetadata adds a type that implements IGithubOAuth2Authenticator
func AddSingletonIGithubOAuth2AuthenticatorWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIGithubOAuth2Authenticator)
	_logAddIGithubOAuth2Authenticator("SINGLETON", implType, _getImplementedIGithubOAuth2AuthenticatorNames(implementedTypes...),
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIGithubOAuth2AuthenticatorByObj adds a prebuilt obj
func AddSingletonIGithubOAuth2AuthenticatorByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIGithubOAuth2Authenticator)
	_logAddIGithubOAuth2Authenticator("SINGLETON", reflect.TypeOf(obj), _getImplementedIGithubOAuth2AuthenticatorNames(implementedTypes...),
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIGithubOAuth2AuthenticatorByObjWithMetadata adds a prebuilt obj
func AddSingletonIGithubOAuth2AuthenticatorByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIGithubOAuth2Authenticator)
	_logAddIGithubOAuth2Authenticator("SINGLETON", reflect.TypeOf(obj), _getImplementedIGithubOAuth2AuthenticatorNames(implementedTypes...),
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIGithubOAuth2AuthenticatorByFunc adds a type by a custom func
func AddSingletonIGithubOAuth2AuthenticatorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIGithubOAuth2Authenticator)
	_logAddIGithubOAuth2Authenticator("SINGLETON", implType, _getImplementedIGithubOAuth2AuthenticatorNames(implementedTypes...),
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIGithubOAuth2AuthenticatorByFuncWithMetadata adds a type by a custom func
func AddSingletonIGithubOAuth2AuthenticatorByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIGithubOAuth2Authenticator)
	_logAddIGithubOAuth2Authenticator("SINGLETON", implType, _getImplementedIGithubOAuth2AuthenticatorNames(implementedTypes...),
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIGithubOAuth2Authenticator adds a type that implements IGithubOAuth2Authenticator
func AddTransientIGithubOAuth2Authenticator(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIGithubOAuth2Authenticator)
	_logAddIGithubOAuth2Authenticator("TRANSIENT", implType, _getImplementedIGithubOAuth2AuthenticatorNames(implementedTypes...),
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIGithubOAuth2AuthenticatorWithMetadata adds a type that implements IGithubOAuth2Authenticator
func AddTransientIGithubOAuth2AuthenticatorWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIGithubOAuth2Authenticator)
	_logAddIGithubOAuth2Authenticator("TRANSIENT", implType, _getImplementedIGithubOAuth2AuthenticatorNames(implementedTypes...),
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIGithubOAuth2AuthenticatorByFunc adds a type by a custom func
func AddTransientIGithubOAuth2AuthenticatorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIGithubOAuth2Authenticator)
	_logAddIGithubOAuth2Authenticator("TRANSIENT", implType, _getImplementedIGithubOAuth2AuthenticatorNames(implementedTypes...),
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIGithubOAuth2AuthenticatorByFuncWithMetadata adds a type by a custom func
func AddTransientIGithubOAuth2AuthenticatorByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIGithubOAuth2Authenticator)
	_logAddIGithubOAuth2Authenticator("TRANSIENT", implType, _getImplementedIGithubOAuth2AuthenticatorNames(implementedTypes...),
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIGithubOAuth2Authenticator adds a type that implements IGithubOAuth2Authenticator
func AddScopedIGithubOAuth2Authenticator(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIGithubOAuth2Authenticator)
	_logAddIGithubOAuth2Authenticator("SCOPED", implType, _getImplementedIGithubOAuth2AuthenticatorNames(implementedTypes...),
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIGithubOAuth2AuthenticatorWithMetadata adds a type that implements IGithubOAuth2Authenticator
func AddScopedIGithubOAuth2AuthenticatorWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIGithubOAuth2Authenticator)
	_logAddIGithubOAuth2Authenticator("SCOPED", implType, _getImplementedIGithubOAuth2AuthenticatorNames(implementedTypes...),
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIGithubOAuth2AuthenticatorByFunc adds a type by a custom func
func AddScopedIGithubOAuth2AuthenticatorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIGithubOAuth2Authenticator)
	_logAddIGithubOAuth2Authenticator("SCOPED", implType, _getImplementedIGithubOAuth2AuthenticatorNames(implementedTypes...),
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIGithubOAuth2AuthenticatorByFuncWithMetadata adds a type by a custom func
func AddScopedIGithubOAuth2AuthenticatorByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIGithubOAuth2Authenticator)
	_logAddIGithubOAuth2Authenticator("SCOPED", implType, _getImplementedIGithubOAuth2AuthenticatorNames(implementedTypes...),
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIGithubOAuth2AuthenticatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIGithubOAuth2Authenticator removes all IGithubOAuth2Authenticator from the DI
func RemoveAllIGithubOAuth2Authenticator(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIGithubOAuth2Authenticator)
}

// GetIGithubOAuth2AuthenticatorFromContainer alternative to SafeGetIGithubOAuth2AuthenticatorFromContainer but panics of object is not present
func GetIGithubOAuth2AuthenticatorFromContainer(ctn di.Container) IGithubOAuth2Authenticator {
	return ctn.GetByType(ReflectTypeIGithubOAuth2Authenticator).(IGithubOAuth2Authenticator)
}

// GetManyIGithubOAuth2AuthenticatorFromContainer alternative to SafeGetManyIGithubOAuth2AuthenticatorFromContainer but panics of object is not present
func GetManyIGithubOAuth2AuthenticatorFromContainer(ctn di.Container) []IGithubOAuth2Authenticator {
	objs := ctn.GetManyByType(ReflectTypeIGithubOAuth2Authenticator)
	var results []IGithubOAuth2Authenticator
	for _, obj := range objs {
		results = append(results, obj.(IGithubOAuth2Authenticator))
	}
	return results
}

// SafeGetIGithubOAuth2AuthenticatorFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIGithubOAuth2AuthenticatorFromContainer(ctn di.Container) (IGithubOAuth2Authenticator, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIGithubOAuth2Authenticator)
	if err != nil {
		return nil, err
	}
	return obj.(IGithubOAuth2Authenticator), nil
}

// GetIGithubOAuth2AuthenticatorDefinition returns that last definition registered that this container can provide
func GetIGithubOAuth2AuthenticatorDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIGithubOAuth2Authenticator)
	return def
}

// GetIGithubOAuth2AuthenticatorDefinitions returns all definitions that this container can provide
func GetIGithubOAuth2AuthenticatorDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIGithubOAuth2Authenticator)
	return defs
}

// SafeGetManyIGithubOAuth2AuthenticatorFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIGithubOAuth2AuthenticatorFromContainer(ctn di.Container) ([]IGithubOAuth2Authenticator, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIGithubOAuth2Authenticator)
	if err != nil {
		return nil, err
	}
	var results []IGithubOAuth2Authenticator
	for _, obj := range objs {
		results = append(results, obj.(IGithubOAuth2Authenticator))
	}
	return results, nil
}

type _logIGithubOAuth2AuthenticatorExtra struct {
	Name  string
	Value interface{}
}

func _logAddIGithubOAuth2Authenticator(scopeType string, implType reflect.Type, interfaces string, extra ..._logIGithubOAuth2AuthenticatorExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIGithubOAuth2AuthenticatorNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}
