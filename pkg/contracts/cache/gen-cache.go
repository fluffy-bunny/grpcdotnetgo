// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package cache

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeICache used when your service claims to implement ICache
var ReflectTypeICache = di.GetInterfaceReflectType((*ICache)(nil))

// AddSingletonICache adds a type that implements ICache
func AddSingletonICache(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeICache)
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonICacheWithMetadata adds a type that implements ICache
func AddSingletonICacheWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeICache)
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonICacheByObj adds a prebuilt obj
func AddSingletonICacheByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeICache)
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonICacheByObjWithMetadata adds a prebuilt obj
func AddSingletonICacheByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeICache)
	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonICacheByFunc adds a type by a custom func
func AddSingletonICacheByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeICache)
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonICacheByFuncWithMetadata adds a type by a custom func
func AddSingletonICacheByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeICache)
	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientICache adds a type that implements ICache
func AddTransientICache(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeICache)
	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientICacheWithMetadata adds a type that implements ICache
func AddTransientICacheWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeICache)
	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientICacheByFunc adds a type by a custom func
func AddTransientICacheByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeICache)
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientICacheByFuncWithMetadata adds a type by a custom func
func AddTransientICacheByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeICache)
	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedICache adds a type that implements ICache
func AddScopedICache(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeICache)
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedICacheWithMetadata adds a type that implements ICache
func AddScopedICacheWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeICache)
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedICacheByFunc adds a type by a custom func
func AddScopedICacheByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeICache)
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedICacheByFuncWithMetadata adds a type by a custom func
func AddScopedICacheByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeICache)
	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllICache removes all ICache from the DI
func RemoveAllICache(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeICache)
}

// GetICacheFromContainer alternative to SafeGetICacheFromContainer but panics of object is not present
func GetICacheFromContainer(ctn di.Container) ICache {
	return ctn.GetByType(ReflectTypeICache).(ICache)
}

// GetManyICacheFromContainer alternative to SafeGetManyICacheFromContainer but panics of object is not present
func GetManyICacheFromContainer(ctn di.Container) []ICache {
	objs := ctn.GetManyByType(ReflectTypeICache)
	var results []ICache
	for _, obj := range objs {
		results = append(results, obj.(ICache))
	}
	return results
}

// SafeGetICacheFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetICacheFromContainer(ctn di.Container) (ICache, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeICache)
	if err != nil {
		return nil, err
	}
	return obj.(ICache), nil
}

// GetICacheDefinition returns that last definition registered that this container can provide
func GetICacheDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeICache)
	return def
}

// GetICacheDefinitions returns all definitions that this container can provide
func GetICacheDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeICache)
	return defs
}

// SafeGetManyICacheFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyICacheFromContainer(ctn di.Container) ([]ICache, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeICache)
	if err != nil {
		return nil, err
	}
	var results []ICache
	for _, obj := range objs {
		results = append(results, obj.(ICache))
	}
	return results, nil
}

// ReflectTypeIMemoryCache used when your service claims to implement IMemoryCache
var ReflectTypeIMemoryCache = di.GetInterfaceReflectType((*IMemoryCache)(nil))

// AddSingletonIMemoryCache adds a type that implements IMemoryCache
func AddSingletonIMemoryCache(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMemoryCache)
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIMemoryCacheWithMetadata adds a type that implements IMemoryCache
func AddSingletonIMemoryCacheWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMemoryCache)
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIMemoryCacheByObj adds a prebuilt obj
func AddSingletonIMemoryCacheByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMemoryCache)
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIMemoryCacheByObjWithMetadata adds a prebuilt obj
func AddSingletonIMemoryCacheByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMemoryCache)
	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIMemoryCacheByFunc adds a type by a custom func
func AddSingletonIMemoryCacheByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMemoryCache)
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIMemoryCacheByFuncWithMetadata adds a type by a custom func
func AddSingletonIMemoryCacheByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMemoryCache)
	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIMemoryCache adds a type that implements IMemoryCache
func AddTransientIMemoryCache(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMemoryCache)
	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIMemoryCacheWithMetadata adds a type that implements IMemoryCache
func AddTransientIMemoryCacheWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMemoryCache)
	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIMemoryCacheByFunc adds a type by a custom func
func AddTransientIMemoryCacheByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMemoryCache)
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIMemoryCacheByFuncWithMetadata adds a type by a custom func
func AddTransientIMemoryCacheByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMemoryCache)
	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIMemoryCache adds a type that implements IMemoryCache
func AddScopedIMemoryCache(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMemoryCache)
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIMemoryCacheWithMetadata adds a type that implements IMemoryCache
func AddScopedIMemoryCacheWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMemoryCache)
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIMemoryCacheByFunc adds a type by a custom func
func AddScopedIMemoryCacheByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMemoryCache)
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIMemoryCacheByFuncWithMetadata adds a type by a custom func
func AddScopedIMemoryCacheByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIMemoryCache)
	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIMemoryCache removes all IMemoryCache from the DI
func RemoveAllIMemoryCache(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIMemoryCache)
}

// GetIMemoryCacheFromContainer alternative to SafeGetIMemoryCacheFromContainer but panics of object is not present
func GetIMemoryCacheFromContainer(ctn di.Container) IMemoryCache {
	return ctn.GetByType(ReflectTypeIMemoryCache).(IMemoryCache)
}

// GetManyIMemoryCacheFromContainer alternative to SafeGetManyIMemoryCacheFromContainer but panics of object is not present
func GetManyIMemoryCacheFromContainer(ctn di.Container) []IMemoryCache {
	objs := ctn.GetManyByType(ReflectTypeIMemoryCache)
	var results []IMemoryCache
	for _, obj := range objs {
		results = append(results, obj.(IMemoryCache))
	}
	return results
}

// SafeGetIMemoryCacheFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIMemoryCacheFromContainer(ctn di.Container) (IMemoryCache, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIMemoryCache)
	if err != nil {
		return nil, err
	}
	return obj.(IMemoryCache), nil
}

// GetIMemoryCacheDefinition returns that last definition registered that this container can provide
func GetIMemoryCacheDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIMemoryCache)
	return def
}

// GetIMemoryCacheDefinitions returns all definitions that this container can provide
func GetIMemoryCacheDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIMemoryCache)
	return defs
}

// SafeGetManyIMemoryCacheFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIMemoryCacheFromContainer(ctn di.Container) ([]IMemoryCache, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIMemoryCache)
	if err != nil {
		return nil, err
	}
	var results []IMemoryCache
	for _, obj := range objs {
		results = append(results, obj.(IMemoryCache))
	}
	return results, nil
}
