// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package session

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeGetSession used when your service claims to implement GetSession
var ReflectTypeGetSession = reflect.TypeOf(GetSession(nil))

// AddSingletonGetSessionFunc adds a func to the DI
func AddGetSessionFunc(builder *di.Builder, fnc GetSession) {
	di.AddFunc(builder, fnc)
}

// RemoveAllGetSessionFunc removes all GetSession functions from the DI
func RemoveAllGetSessionFunc(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeGetSession)
}

// GetGetSessionFromContainer alternative to SafeGetGetSessionFromContainer but panics of object is not present
func GetGetSessionFromContainer(ctn di.Container) GetSession {
	return ctn.GetByType(ReflectTypeGetSession).(GetSession)
}

// GetManyGetSessionFromContainer alternative to SafeGetManyGetSessionFromContainer but panics of object is not present
func GetManyGetSessionFromContainer(ctn di.Container) []GetSession {
	objs := ctn.GetManyByType(ReflectTypeGetSession)
	var results []GetSession
	for _, obj := range objs {
		results = append(results, obj.(GetSession))
	}
	return results
}

// SafeGetGetSessionFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetGetSessionFromContainer(ctn di.Container) (GetSession, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeGetSession)
	if err != nil {
		return nil, err
	}
	return obj.(GetSession), nil
}

// SafeGetManyGetSessionFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyGetSessionFromContainer(ctn di.Container) ([]GetSession, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeGetSession)
	if err != nil {
		return nil, err
	}
	var results []GetSession
	for _, obj := range objs {
		results = append(results, obj.(GetSession))
	}
	return results, nil
}
