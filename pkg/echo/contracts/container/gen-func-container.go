// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package container

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeContainerAccessor used when your service claims to implement ContainerAccessor
var ReflectTypeContainerAccessor = reflect.TypeOf(ContainerAccessor(nil))

// AddSingletonContainerAccessorFunc adds a func to the DI
func AddContainerAccessorFunc(builder *di.Builder, fnc ContainerAccessor) {
	di.AddFunc(builder, fnc)
}

// RemoveAllContainerAccessorFunc removes all ContainerAccessor functions from the DI
func RemoveAllContainerAccessorFunc(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeContainerAccessor)
}

// GetContainerAccessorFromContainer alternative to SafeGetContainerAccessorFromContainer but panics of object is not present
func GetContainerAccessorFromContainer(ctn di.Container) ContainerAccessor {
	return ctn.GetByType(ReflectTypeContainerAccessor).(ContainerAccessor)
}

// GetManyContainerAccessorFromContainer alternative to SafeGetManyContainerAccessorFromContainer but panics of object is not present
func GetManyContainerAccessorFromContainer(ctn di.Container) []ContainerAccessor {
	objs := ctn.GetManyByType(ReflectTypeContainerAccessor)
	var results []ContainerAccessor
	for _, obj := range objs {
		results = append(results, obj.(ContainerAccessor))
	}
	return results
}

// SafeGetContainerAccessorFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetContainerAccessorFromContainer(ctn di.Container) (ContainerAccessor, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeContainerAccessor)
	if err != nil {
		return nil, err
	}
	return obj.(ContainerAccessor), nil
}

// SafeGetManyContainerAccessorFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyContainerAccessorFromContainer(ctn di.Container) ([]ContainerAccessor, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeContainerAccessor)
	if err != nil {
		return nil, err
	}
	var results []ContainerAccessor
	for _, obj := range objs {
		results = append(results, obj.(ContainerAccessor))
	}
	return results, nil
}
