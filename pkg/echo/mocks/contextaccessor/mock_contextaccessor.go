// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fluffy-bunny/grpcdotnetgo/pkg/echo/contracts/contextaccessor (interfaces: IInternalEchoContextAccessor,IEchoContextAccessor)

// Package contextaccessor is a generated GoMock package.
package contextaccessor

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockIInternalEchoContextAccessor is a mock of IInternalEchoContextAccessor interface.
type MockIInternalEchoContextAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockIInternalEchoContextAccessorMockRecorder
}

// MockIInternalEchoContextAccessorMockRecorder is the mock recorder for MockIInternalEchoContextAccessor.
type MockIInternalEchoContextAccessorMockRecorder struct {
	mock *MockIInternalEchoContextAccessor
}

// NewMockIInternalEchoContextAccessor creates a new mock instance.
func NewMockIInternalEchoContextAccessor(ctrl *gomock.Controller) *MockIInternalEchoContextAccessor {
	mock := &MockIInternalEchoContextAccessor{ctrl: ctrl}
	mock.recorder = &MockIInternalEchoContextAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIInternalEchoContextAccessor) EXPECT() *MockIInternalEchoContextAccessorMockRecorder {
	return m.recorder
}

// GetContext mocks base method.
func (m *MockIInternalEchoContextAccessor) GetContext() echo.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(echo.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockIInternalEchoContextAccessorMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockIInternalEchoContextAccessor)(nil).GetContext))
}

// SetContext mocks base method.
func (m *MockIInternalEchoContextAccessor) SetContext(arg0 echo.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContext", arg0)
}

// SetContext indicates an expected call of SetContext.
func (mr *MockIInternalEchoContextAccessorMockRecorder) SetContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockIInternalEchoContextAccessor)(nil).SetContext), arg0)
}

// MockIEchoContextAccessor is a mock of IEchoContextAccessor interface.
type MockIEchoContextAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockIEchoContextAccessorMockRecorder
}

// MockIEchoContextAccessorMockRecorder is the mock recorder for MockIEchoContextAccessor.
type MockIEchoContextAccessorMockRecorder struct {
	mock *MockIEchoContextAccessor
}

// NewMockIEchoContextAccessor creates a new mock instance.
func NewMockIEchoContextAccessor(ctrl *gomock.Controller) *MockIEchoContextAccessor {
	mock := &MockIEchoContextAccessor{ctrl: ctrl}
	mock.recorder = &MockIEchoContextAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEchoContextAccessor) EXPECT() *MockIEchoContextAccessorMockRecorder {
	return m.recorder
}

// GetContext mocks base method.
func (m *MockIEchoContextAccessor) GetContext() echo.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(echo.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockIEchoContextAccessorMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockIEchoContextAccessor)(nil).GetContext))
}
