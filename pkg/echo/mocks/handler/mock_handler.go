// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fluffy-bunny/grpcdotnetgo/pkg/echo/contracts/handler (interfaces: IHandler,IHandlerFactory)

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockIHandler is a mock of IHandler interface.
type MockIHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIHandlerMockRecorder
}

// MockIHandlerMockRecorder is the mock recorder for MockIHandler.
type MockIHandlerMockRecorder struct {
	mock *MockIHandler
}

// NewMockIHandler creates a new mock instance.
func NewMockIHandler(ctrl *gomock.Controller) *MockIHandler {
	mock := &MockIHandler{ctrl: ctrl}
	mock.recorder = &MockIHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHandler) EXPECT() *MockIHandlerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockIHandler) Do(arg0 echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockIHandlerMockRecorder) Do(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockIHandler)(nil).Do), arg0)
}

// GetMiddleware mocks base method.
func (m *MockIHandler) GetMiddleware() []echo.MiddlewareFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMiddleware")
	ret0, _ := ret[0].([]echo.MiddlewareFunc)
	return ret0
}

// GetMiddleware indicates an expected call of GetMiddleware.
func (mr *MockIHandlerMockRecorder) GetMiddleware() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMiddleware", reflect.TypeOf((*MockIHandler)(nil).GetMiddleware))
}

// MockIHandlerFactory is a mock of IHandlerFactory interface.
type MockIHandlerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIHandlerFactoryMockRecorder
}

// MockIHandlerFactoryMockRecorder is the mock recorder for MockIHandlerFactory.
type MockIHandlerFactoryMockRecorder struct {
	mock *MockIHandlerFactory
}

// NewMockIHandlerFactory creates a new mock instance.
func NewMockIHandlerFactory(ctrl *gomock.Controller) *MockIHandlerFactory {
	mock := &MockIHandlerFactory{ctrl: ctrl}
	mock.recorder = &MockIHandlerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHandlerFactory) EXPECT() *MockIHandlerFactoryMockRecorder {
	return m.recorder
}

// RegisterHandlers mocks base method.
func (m *MockIHandlerFactory) RegisterHandlers(arg0 *echo.Group) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterHandlers", arg0)
}

// RegisterHandlers indicates an expected call of RegisterHandlers.
func (mr *MockIHandlerFactoryMockRecorder) RegisterHandlers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHandlers", reflect.TypeOf((*MockIHandlerFactory)(nil).RegisterHandlers), arg0)
}
