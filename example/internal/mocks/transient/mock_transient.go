// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fluffy-bunny/grpcdotnetgo/example/internal/contracts/transient (interfaces: ITransient)

// Package transient is a generated GoMock package.
package transient

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITransient is a mock of ITransient interface.
type MockITransient struct {
	ctrl     *gomock.Controller
	recorder *MockITransientMockRecorder
}

// MockITransientMockRecorder is the mock recorder for MockITransient.
type MockITransientMockRecorder struct {
	mock *MockITransient
}

// NewMockITransient creates a new mock instance.
func NewMockITransient(ctrl *gomock.Controller) *MockITransient {
	mock := &MockITransient{ctrl: ctrl}
	mock.recorder = &MockITransientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransient) EXPECT() *MockITransientMockRecorder {
	return m.recorder
}

// GetName mocks base method.
func (m *MockITransient) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockITransientMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockITransient)(nil).GetName))
}

// SetName mocks base method.
func (m *MockITransient) SetName(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", arg0)
}

// SetName indicates an expected call of SetName.
func (mr *MockITransientMockRecorder) SetName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockITransient)(nil).SetName), arg0)
}
