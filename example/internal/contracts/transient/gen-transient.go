// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package transient

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeITransient used when your service claims to implement ITransient
var ReflectTypeITransient = di.GetInterfaceReflectType((*ITransient)(nil))

// AddSingletonITransient adds a type that implements ITransient
func AddSingletonITransient(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITransient)
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonITransientWithMetadata adds a type that implements ITransient
func AddSingletonITransientWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITransient)
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonITransientByObj adds a prebuilt obj
func AddSingletonITransientByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITransient)
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonITransientByObjWithMetadata adds a prebuilt obj
func AddSingletonITransientByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITransient)
	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonITransientByFunc adds a type by a custom func
func AddSingletonITransientByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITransient)
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonITransientByFuncWithMetadata adds a type by a custom func
func AddSingletonITransientByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITransient)
	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientITransient adds a type that implements ITransient
func AddTransientITransient(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITransient)
	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientITransientWithMetadata adds a type that implements ITransient
func AddTransientITransientWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITransient)
	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientITransientByFunc adds a type by a custom func
func AddTransientITransientByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITransient)
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientITransientByFuncWithMetadata adds a type by a custom func
func AddTransientITransientByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITransient)
	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedITransient adds a type that implements ITransient
func AddScopedITransient(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITransient)
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedITransientWithMetadata adds a type that implements ITransient
func AddScopedITransientWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITransient)
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedITransientByFunc adds a type by a custom func
func AddScopedITransientByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITransient)
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedITransientByFuncWithMetadata adds a type by a custom func
func AddScopedITransientByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITransient)
	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllITransient removes all ITransient from the DI
func RemoveAllITransient(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeITransient)
}

// GetITransientFromContainer alternative to SafeGetITransientFromContainer but panics of object is not present
func GetITransientFromContainer(ctn di.Container) ITransient {
	return ctn.GetByType(ReflectTypeITransient).(ITransient)
}

// GetManyITransientFromContainer alternative to SafeGetManyITransientFromContainer but panics of object is not present
func GetManyITransientFromContainer(ctn di.Container) []ITransient {
	objs := ctn.GetManyByType(ReflectTypeITransient)
	var results []ITransient
	for _, obj := range objs {
		results = append(results, obj.(ITransient))
	}
	return results
}

// SafeGetITransientFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetITransientFromContainer(ctn di.Container) (ITransient, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeITransient)
	if err != nil {
		return nil, err
	}
	return obj.(ITransient), nil
}

// GetITransientDefinition returns that last definition registered that this container can provide
func GetITransientDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeITransient)
	return def
}

// GetITransientDefinitions returns all definitions that this container can provide
func GetITransientDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeITransient)
	return defs
}

// SafeGetManyITransientFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyITransientFromContainer(ctn di.Container) ([]ITransient, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeITransient)
	if err != nil {
		return nil, err
	}
	var results []ITransient
	for _, obj := range objs {
		results = append(results, obj.(ITransient))
	}
	return results, nil
}
