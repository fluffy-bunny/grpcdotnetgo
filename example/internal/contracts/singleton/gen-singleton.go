// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package singleton

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeISingleton used when your service claims to implement ISingleton
var ReflectTypeISingleton = di.GetInterfaceReflectType((*ISingleton)(nil))

// AddSingletonISingleton adds a type that implements ISingleton
func AddSingletonISingleton(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	di.AddSingletonWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddSingletonISingletonByObj adds a prebuilt obj
func AddSingletonISingletonByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonISingletonByFunc adds a type by a custom func
func AddSingletonISingletonByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientISingleton adds a type that implements ISingleton
func AddTransientISingleton(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientISingletonByFunc adds a type by a custom func
func AddTransientISingletonByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedISingleton adds a type that implements ISingleton
func AddScopedISingleton(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedISingletonByFunc adds a type by a custom func
func AddScopedISingletonByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// RemoveAllISingleton removes all ISingleton from the DI
func RemoveAllISingleton(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeISingleton)
}

// GetISingletonFromContainer alternative to SafeGetISingletonFromContainer but panics of object is not present
func GetISingletonFromContainer(ctn di.Container) ISingleton {
	return ctn.GetByType(ReflectTypeISingleton).(ISingleton)
}

// GetManyISingletonFromContainer alternative to SafeGetManyISingletonFromContainer but panics of object is not present
func GetManyISingletonFromContainer(ctn di.Container) []ISingleton {
	objs := ctn.GetManyByType(ReflectTypeISingleton)
	var results []ISingleton
	for _, obj := range objs {
		results = append(results, obj.(ISingleton))
	}
	return results
}

// SafeGetISingletonFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetISingletonFromContainer(ctn di.Container) (ISingleton, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeISingleton)
	if err != nil {
		return nil, err
	}
	return obj.(ISingleton), nil
}

// SafeGetManyISingletonFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyISingletonFromContainer(ctn di.Container) ([]ISingleton, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeISingleton)
	if err != nil {
		return nil, err
	}
	var results []ISingleton
	for _, obj := range objs {
		results = append(results, obj.(ISingleton))
	}
	return results, nil
}
