// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package singleton

import (
	"reflect"
	"strings"

	di "github.com/fluffy-bunny/sarulabsdi"
	"github.com/rs/zerolog/log"
)

// ReflectTypeISingleton used when your service claims to implement ISingleton
var ReflectTypeISingleton = di.GetInterfaceReflectType((*ISingleton)(nil))

// AddSingletonISingleton adds a type that implements ISingleton
func AddSingletonISingleton(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	_logAddISingleton("SINGLETON", implType, _getImplementedISingletonNames(implementedTypes...),
		_logISingletonExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonISingletonWithMetadata adds a type that implements ISingleton
func AddSingletonISingletonWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	_logAddISingleton("SINGLETON", implType, _getImplementedISingletonNames(implementedTypes...),
		_logISingletonExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logISingletonExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonISingletonByObj adds a prebuilt obj
func AddSingletonISingletonByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	_logAddISingleton("SINGLETON", reflect.TypeOf(obj), _getImplementedISingletonNames(implementedTypes...),
		_logISingletonExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonISingletonByObjWithMetadata adds a prebuilt obj
func AddSingletonISingletonByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	_logAddISingleton("SINGLETON", reflect.TypeOf(obj), _getImplementedISingletonNames(implementedTypes...),
		_logISingletonExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logISingletonExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonISingletonByFunc adds a type by a custom func
func AddSingletonISingletonByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	_logAddISingleton("SINGLETON", implType, _getImplementedISingletonNames(implementedTypes...),
		_logISingletonExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonISingletonByFuncWithMetadata adds a type by a custom func
func AddSingletonISingletonByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	_logAddISingleton("SINGLETON", implType, _getImplementedISingletonNames(implementedTypes...),
		_logISingletonExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logISingletonExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientISingleton adds a type that implements ISingleton
func AddTransientISingleton(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	_logAddISingleton("TRANSIENT", implType, _getImplementedISingletonNames(implementedTypes...),
		_logISingletonExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientISingletonWithMetadata adds a type that implements ISingleton
func AddTransientISingletonWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	_logAddISingleton("TRANSIENT", implType, _getImplementedISingletonNames(implementedTypes...),
		_logISingletonExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logISingletonExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientISingletonByFunc adds a type by a custom func
func AddTransientISingletonByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	_logAddISingleton("TRANSIENT", implType, _getImplementedISingletonNames(implementedTypes...),
		_logISingletonExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientISingletonByFuncWithMetadata adds a type by a custom func
func AddTransientISingletonByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	_logAddISingleton("TRANSIENT", implType, _getImplementedISingletonNames(implementedTypes...),
		_logISingletonExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logISingletonExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedISingleton adds a type that implements ISingleton
func AddScopedISingleton(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	_logAddISingleton("SCOPED", implType, _getImplementedISingletonNames(implementedTypes...),
		_logISingletonExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedISingletonWithMetadata adds a type that implements ISingleton
func AddScopedISingletonWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	_logAddISingleton("SCOPED", implType, _getImplementedISingletonNames(implementedTypes...),
		_logISingletonExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logISingletonExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedISingletonByFunc adds a type by a custom func
func AddScopedISingletonByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	_logAddISingleton("SCOPED", implType, _getImplementedISingletonNames(implementedTypes...),
		_logISingletonExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedISingletonByFuncWithMetadata adds a type by a custom func
func AddScopedISingletonByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingleton)
	_logAddISingleton("SCOPED", implType, _getImplementedISingletonNames(implementedTypes...),
		_logISingletonExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logISingletonExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllISingleton removes all ISingleton from the DI
func RemoveAllISingleton(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeISingleton)
}

// GetISingletonFromContainer alternative to SafeGetISingletonFromContainer but panics of object is not present
func GetISingletonFromContainer(ctn di.Container) ISingleton {
	return ctn.GetByType(ReflectTypeISingleton).(ISingleton)
}

// GetManyISingletonFromContainer alternative to SafeGetManyISingletonFromContainer but panics of object is not present
func GetManyISingletonFromContainer(ctn di.Container) []ISingleton {
	objs := ctn.GetManyByType(ReflectTypeISingleton)
	var results []ISingleton
	for _, obj := range objs {
		results = append(results, obj.(ISingleton))
	}
	return results
}

// SafeGetISingletonFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetISingletonFromContainer(ctn di.Container) (ISingleton, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeISingleton)
	if err != nil {
		return nil, err
	}
	return obj.(ISingleton), nil
}

// GetISingletonDefinition returns that last definition registered that this container can provide
func GetISingletonDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeISingleton)
	return def
}

// GetISingletonDefinitions returns all definitions that this container can provide
func GetISingletonDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeISingleton)
	return defs
}

// SafeGetManyISingletonFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyISingletonFromContainer(ctn di.Container) ([]ISingleton, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeISingleton)
	if err != nil {
		return nil, err
	}
	var results []ISingleton
	for _, obj := range objs {
		results = append(results, obj.(ISingleton))
	}
	return results, nil
}

type _logISingletonExtra struct {
	Name  string
	Value interface{}
}

func _logAddISingleton(scopeType string, implType reflect.Type, interfaces string, extra ..._logISingletonExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedISingletonNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}
