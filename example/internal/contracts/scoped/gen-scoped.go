// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package scoped

import (
	"reflect"
	"strings"

	di "github.com/fluffy-bunny/sarulabsdi"
	"github.com/rs/zerolog/log"
)

// ReflectTypeIScoped used when your service claims to implement IScoped
var ReflectTypeIScoped = di.GetInterfaceReflectType((*IScoped)(nil))

// AddSingletonIScoped adds a type that implements IScoped
func AddSingletonIScoped(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIScoped)
	_logAddIScoped("SINGLETON", implType, _getImplementedIScopedNames(implementedTypes...),
		_logIScopedExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIScopedWithMetadata adds a type that implements IScoped
func AddSingletonIScopedWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIScoped)
	_logAddIScoped("SINGLETON", implType, _getImplementedIScopedNames(implementedTypes...),
		_logIScopedExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIScopedExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIScopedByObj adds a prebuilt obj
func AddSingletonIScopedByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIScoped)
	_logAddIScoped("SINGLETON", reflect.TypeOf(obj), _getImplementedIScopedNames(implementedTypes...),
		_logIScopedExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIScopedByObjWithMetadata adds a prebuilt obj
func AddSingletonIScopedByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIScoped)
	_logAddIScoped("SINGLETON", reflect.TypeOf(obj), _getImplementedIScopedNames(implementedTypes...),
		_logIScopedExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIScopedExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIScopedByFunc adds a type by a custom func
func AddSingletonIScopedByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIScoped)
	_logAddIScoped("SINGLETON", implType, _getImplementedIScopedNames(implementedTypes...),
		_logIScopedExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIScopedByFuncWithMetadata adds a type by a custom func
func AddSingletonIScopedByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIScoped)
	_logAddIScoped("SINGLETON", implType, _getImplementedIScopedNames(implementedTypes...),
		_logIScopedExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIScopedExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIScoped adds a type that implements IScoped
func AddTransientIScoped(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIScoped)
	_logAddIScoped("TRANSIENT", implType, _getImplementedIScopedNames(implementedTypes...),
		_logIScopedExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIScopedWithMetadata adds a type that implements IScoped
func AddTransientIScopedWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIScoped)
	_logAddIScoped("TRANSIENT", implType, _getImplementedIScopedNames(implementedTypes...),
		_logIScopedExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIScopedExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIScopedByFunc adds a type by a custom func
func AddTransientIScopedByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIScoped)
	_logAddIScoped("TRANSIENT", implType, _getImplementedIScopedNames(implementedTypes...),
		_logIScopedExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIScopedByFuncWithMetadata adds a type by a custom func
func AddTransientIScopedByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIScoped)
	_logAddIScoped("TRANSIENT", implType, _getImplementedIScopedNames(implementedTypes...),
		_logIScopedExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIScopedExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIScoped adds a type that implements IScoped
func AddScopedIScoped(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIScoped)
	_logAddIScoped("SCOPED", implType, _getImplementedIScopedNames(implementedTypes...),
		_logIScopedExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIScopedWithMetadata adds a type that implements IScoped
func AddScopedIScopedWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIScoped)
	_logAddIScoped("SCOPED", implType, _getImplementedIScopedNames(implementedTypes...),
		_logIScopedExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIScopedExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIScopedByFunc adds a type by a custom func
func AddScopedIScopedByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIScoped)
	_logAddIScoped("SCOPED", implType, _getImplementedIScopedNames(implementedTypes...),
		_logIScopedExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIScopedByFuncWithMetadata adds a type by a custom func
func AddScopedIScopedByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIScoped)
	_logAddIScoped("SCOPED", implType, _getImplementedIScopedNames(implementedTypes...),
		_logIScopedExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIScopedExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIScoped removes all IScoped from the DI
func RemoveAllIScoped(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIScoped)
}

// GetIScopedFromContainer alternative to SafeGetIScopedFromContainer but panics of object is not present
func GetIScopedFromContainer(ctn di.Container) IScoped {
	return ctn.GetByType(ReflectTypeIScoped).(IScoped)
}

// GetManyIScopedFromContainer alternative to SafeGetManyIScopedFromContainer but panics of object is not present
func GetManyIScopedFromContainer(ctn di.Container) []IScoped {
	objs := ctn.GetManyByType(ReflectTypeIScoped)
	var results []IScoped
	for _, obj := range objs {
		results = append(results, obj.(IScoped))
	}
	return results
}

// SafeGetIScopedFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIScopedFromContainer(ctn di.Container) (IScoped, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIScoped)
	if err != nil {
		return nil, err
	}
	return obj.(IScoped), nil
}

// GetIScopedDefinition returns that last definition registered that this container can provide
func GetIScopedDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIScoped)
	return def
}

// GetIScopedDefinitions returns all definitions that this container can provide
func GetIScopedDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIScoped)
	return defs
}

// SafeGetManyIScopedFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIScopedFromContainer(ctn di.Container) ([]IScoped, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIScoped)
	if err != nil {
		return nil, err
	}
	var results []IScoped
	for _, obj := range objs {
		results = append(results, obj.(IScoped))
	}
	return results, nil
}

type _logIScopedExtra struct {
	Name  string
	Value interface{}
}

func _logAddIScoped(scopeType string, implType reflect.Type, interfaces string, extra ..._logIScopedExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIScopedNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}
