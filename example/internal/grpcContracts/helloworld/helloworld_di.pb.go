// Code generated by protoc-gen-go-di. DO NOT EDIT.

package helloworld

import (
	context "context"
	grpcdotnetgo "github.com/fluffy-bunny/grpcdotnetgo"
	dicontext "github.com/fluffy-bunny/grpcdotnetgo/middleware/dicontext"
	v2 "github.com/sarulabs/di/v2"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpcdotnetgo.SupportPackageIsVersion7

// GreeterService defines the required downstream service interface
type GreeterService interface {
	SayHello(request *HelloRequest) (*HelloReply, error)
}

// diGreeterServiceName is the unique service name that MUST be used to register the downstream service in the DI
const diGreeterServiceName = "grpc-downstreamservice-Greeter.BpLnfgDsc2WD8F2qNfHK5a84jjJkwzDk"

// GetGreeterServiceName is a getter to fetch the unique service name.
func GetGreeterServiceName() string {
	return diGreeterServiceName
}

// GetGreeterFromContainer fetches the downstream di.Request scoped service
func GetGreeterFromContainer(ctn v2.Container) GreeterService {
	return ctn.Get(GetGreeterServiceName()).(GreeterService)
}

// Impl for Greeter server instances
type greeterServer struct {
	UnimplementedGreeterServer
}

func RegisterGreeterServerDI(s grpc.ServiceRegistrar) {
	// Register the server
	RegisterGreeterServer(s, &greeterServer{})
}

func (s *greeterServer) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := GetGreeterFromContainer(requestContainer)
	return downstreamService.SayHello(request)
}
