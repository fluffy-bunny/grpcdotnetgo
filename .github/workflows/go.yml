name: Go

on:
  push:
    branches: [ '**' ]
    paths-ignore:
      - 'README.md'
      - 'example/README.md'
      - 'docs/**'
      - '.github/dependabot.yml'
  pull_request:
    branches: [ main ]
env:
  BINARY: 'server'

jobs:
 # Lint check, using https://github.com/mgechev/revive
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Run Revive Action
        uses: docker://morphy/revive-action:v2
        with:
          config: ./revive.toml
          name: "Linter"
  framework:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: "^1.17"

    - name: GO MOD VENDOR
      run: go mod vendor

    - name: Test
      run: go test -v -short -p=1 -count=1 -race ./...

    - name: Generate coverage report and lint
      run: |
        mkdir -p coverage
        go test ./... -cover -short -coverprofile=coverage/cov.out -json > coverage/report.json
        go tool cover -html=coverage/cov.out -o coverage/cov.html
        go tool cover -func=coverage/cov.out > coverage/byfunc.txt
        go install github.com/mgechev/revive@latest
        revive -config ./revive.toml -formatter default ./... > coverage/golint.txt

    - name: Upload coverage report
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: coverage

    - name: Upload Vendor
      uses: actions/upload-artifact@v2
      with:
        name: vendor
        path: ./vendor

  example-app:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: example
    steps:
    - uses: actions/checkout@v2
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: "^1.17"

    - name: Setting Up protoc
      uses: arduino/setup-protoc@v1
      with:
        version: '3.14.0'

    - name: GO MOD VENDOR
      run: go mod vendor

    - name: Install protoc Plugins
      run:  |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1
        go get -u github.com/fluffy-bunny/protoc-gen-go-di/cmd/protoc-gen-go-di
    
    - name: make proto go
      run: |
        protoc --proto_path=. --proto_path=vendor --proto_path=vendor/github.com/fluffy-bunny  --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative --go-di_out=. --go-di_opt=paths=source_relative ./internal/grpcContracts/helloworld/helloworld.proto
 
    - name: Build
      run: |
        go build -mod=mod -v -a -tags netgo -ldflags "-X 'main.version=${{ steps.tag_version.outputs.new_tag }}' -extldflags '-static'" ./cmd/${{ env.BINARY }}  

    - name: Test
      run: |
        go test -mod=mod -v ./... 
        
    - name: Generate coverage report
      run: |
        go test -mod=mod -cover -coverprofile="c.out" ./...  
        go tool cover -html="c.out" -o coverage-example.html
        ls

    - name: Upload coverage report
      uses: actions/upload-artifact@v2
      with:
        name: coverage-example-report
        path: ./example/coverage-example.html

    - name: Upload build
      uses: actions/upload-artifact@v2
      with:
        name: build
        path: ./${{ env.BINARY }}

  release:
    needs: [framework,example-app]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: example

    steps:
    - name: Bump version and push tag
      id: tag_version
      uses: mathieudutour/github-tag-action@v5.6
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create a GitHub release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
