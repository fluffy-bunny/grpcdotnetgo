// Code generated by protoc-gen-go-di. DO NOT EDIT.

package helloworld

import (
	context "context"
	pkg "github.com/fluffy-bunny/grpcdotnetgo/pkg"
	dicontext "github.com/fluffy-bunny/grpcdotnetgo/pkg/middleware/dicontext"
	pkg1 "github.com/fluffy-bunny/protoc-gen-go-di/pkg"
	sarulabsdi "github.com/fluffy-bunny/sarulabsdi"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = pkg.SupportPackageIsVersion7

func setNewField_BpLnfgDsc2WD8F2qNfHK5a84jjJkwzDk(dst interface{}, field string) {
	v := reflect.ValueOf(dst).Elem().FieldByName(field)
	if v.IsValid() {
		v.Set(reflect.New(v.Type().Elem()))
	}
}

// IGreeterServer defines the grpc server
type IGreeterServer interface {
	SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error)
}

// IGreeterService defines the required downstream service interface
type IGreeterService interface {
	SayHello(request *HelloRequest) (*HelloReply, error)
}

// IGreeterService reflect type
var TypeIGreeterService = sarulabsdi.GetInterfaceReflectType((*IGreeterService)(nil))

// GetGreeterServiceFromContainer fetches the downstream di.Request scoped service
func GetGreeterServiceFromContainer(ctn sarulabsdi.Container) IGreeterService {
	return ctn.GetByType(TypeIGreeterService).(IGreeterService)
}

// Impl for Greeter server instances
type greeterServer struct {
	UnimplementedGreeterServer
}

func RegisterGreeterServerDI(s grpc.ServiceRegistrar) interface{} {
	// Register the server
	var server = &greeterServer{}
	RegisterGreeterServer(s, server)
	return server
}

func (s *greeterServer) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := GetGreeterServiceFromContainer(requestContainer)
	return downstreamService.SayHello(request)
}

// FullMethodNames for Greeter
const (
	FMN_helloworld_Greeter_SayHello = "/helloworld.Greeter/SayHello"
)

// IGreeter2Server defines the grpc server
type IGreeter2Server interface {
	SayHello(ctx context.Context, request *HelloRequest) (*HelloReply2, error)
}

// IGreeter2Service defines the required downstream service interface
type IGreeter2Service interface {
	SayHello(request *HelloRequest) (*HelloReply2, error)
}

// IGreeter2Service reflect type
var TypeIGreeter2Service = sarulabsdi.GetInterfaceReflectType((*IGreeter2Service)(nil))

// GetGreeter2ServiceFromContainer fetches the downstream di.Request scoped service
func GetGreeter2ServiceFromContainer(ctn sarulabsdi.Container) IGreeter2Service {
	return ctn.GetByType(TypeIGreeter2Service).(IGreeter2Service)
}

// Impl for Greeter2 server instances
type greeter2Server struct {
	UnimplementedGreeter2Server
}

func RegisterGreeter2ServerDI(s grpc.ServiceRegistrar) interface{} {
	// Register the server
	var server = &greeter2Server{}
	RegisterGreeter2Server(s, server)
	return server
}

func (s *greeter2Server) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply2, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := GetGreeter2ServiceFromContainer(requestContainer)
	return downstreamService.SayHello(request)
}

// FullMethodNames for Greeter2
const (
	FMN_helloworld_Greeter2_SayHello = "/helloworld.Greeter2/SayHello"
)

// New_helloworldFullMethodNameSLice create a new map of fullMethodNames to []string
// i.e. /helloworld.Greeter/SayHello
func New_helloworldFullMethodNameSlice() []string {
	slice := []string{
		"/helloworld.Greeter/SayHello",
		"/helloworld.Greeter2/SayHello",
	}
	return slice
}
func init() {
	r := New_helloworldFullMethodNameSlice()
	pkg1.AddFullMethodNameSliceToMap(r)
}

// helloworldFullMethodNameEmptyResponseMap keys match that of grpc.UnaryServerInfo.FullMethodName
// i.e. /helloworld.Greeter/SayHello
var helloworldFullMethodNameEmptyResponseMap = map[string]func() interface{}{
	"/helloworld.Greeter/SayHello": func() interface{} {
		ret := &HelloReply{}
		return ret
	},
	"/helloworld.Greeter2/SayHello": func() interface{} {
		ret := &HelloReply2{}
		return ret
	},
}

func Get_helloworldFullEmptyResponseFromFullMethodName(fullMethodName string) func() interface{} {
	v, ok := helloworldFullMethodNameEmptyResponseMap[fullMethodName]
	if ok {
		return v
	}
	return nil
}

// helloworldFullMethodNameWithErrorResponseMap keys match that of grpc.UnaryServerInfo.FullMethodName
// i.e. /helloworld.Greeter/SayHello
var helloworldFullMethodNameWithErrorResponseMap = map[string]func() interface{}{
	"/helloworld.Greeter/SayHello": func() interface{} {
		ret := &HelloReply{}
		setNewField_BpLnfgDsc2WD8F2qNfHK5a84jjJkwzDk(ret, "Error")
		return ret
	},
	"/helloworld.Greeter2/SayHello": func() interface{} {
		ret := &HelloReply2{}
		setNewField_BpLnfgDsc2WD8F2qNfHK5a84jjJkwzDk(ret, "Error")
		return ret
	},
}

func Get_helloworldFullEmptyResponseWithErrorFromFullMethodName(fullMethodName string) func() interface{} {
	v, ok := helloworldFullMethodNameWithErrorResponseMap[fullMethodName]
	if ok {
		return v
	}
	return nil
}

// M_helloworld_GreeterFullMethodNameExecuteMap keys match that of grpc.UnaryServerInfo.FullMethodName
var M_helloworld_GreeterFullMethodNameExecuteMap = map[string]func(service IGreeterServer, ctx context.Context, request interface{}) (interface{}, error){
	"/helloworld.Greeter/SayHello": func(service IGreeterServer, ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*HelloRequest)
		return service.SayHello(ctx, req)
	},
}

// M_helloworld_Greeter2FullMethodNameExecuteMap keys match that of grpc.UnaryServerInfo.FullMethodName
var M_helloworld_Greeter2FullMethodNameExecuteMap = map[string]func(service IGreeter2Server, ctx context.Context, request interface{}) (interface{}, error){
	"/helloworld.Greeter2/SayHello": func(service IGreeter2Server, ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*HelloRequest)
		return service.SayHello(ctx, req)
	},
}
